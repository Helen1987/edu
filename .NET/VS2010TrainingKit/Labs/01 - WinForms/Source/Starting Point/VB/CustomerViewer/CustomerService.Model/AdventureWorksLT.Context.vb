' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data.Common
Imports System.Data.EntityClient
Imports System.Data.Metadata.Edm
Imports System.Data.Objects.DataClasses
Imports System.Data.Objects
Imports System.Data
Imports System.Diagnostics
Imports System.Globalization
Imports System.Linq
Imports System.Runtime.CompilerServices

Partial Public Class AdventureWorksLT_DataEntities
    Inherits ObjectContext
    Public Const SettingsConnectionString As String = "name=AdventureWorksLT_DataEntities"
    Public Const ContainerName As String = "AdventureWorksLT_DataEntities"

#Region "Constructors"

    Public Sub New()
        MyBase.New(SettingsConnectionString, ContainerName)
        Initialize()
    End Sub

    Public Sub New(ByVal connectionString As String)
        MyBase.New(connectionString, ContainerName)
        Initialize()
    End Sub

    Public Sub New(ByVal connection As EntityConnection)
        MyBase.New(connection, ContainerName)
        Initialize()
    End Sub

    Private Sub Initialize()
        ' Creating proxies requires the use of the ProxyDataContractResolver and
        ' may allow lazy loading which can expand the loaded graph during serialization.
        ContextOptions.ProxyCreationEnabled = False
        AddHandler ObjectMaterialized, AddressOf HandleObjectMaterialized
    End Sub

    Private Sub HandleObjectMaterialized(ByVal sender As Object, ByVal e As ObjectMaterializedEventArgs)
        Dim entity As IObjectWithChangeTracker = TryCast(e.Entity, IObjectWithChangeTracker)
        If entity IsNot Nothing Then
            Dim changeTrackingEnabled As Boolean = entity.ChangeTracker.ChangeTrackingEnabled
            Try
                entity.MarkAsUnchanged()
            Finally
                entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled
            End Try
            Me.StoreReferenceKeyValues(entity)
        End If
    End Sub

#End Region
#Region "ObjectSet Properties"

    Public ReadOnly Property Addresses() As ObjectSet(Of Address)
        Get
            If _addresses Is Nothing Then
                _addresses = CreateObjectSet(Of Address)("Addresses")
            End If
            Return _addresses
        End Get
    End Property
    Private _addresses As ObjectSet(Of Address)

    Public ReadOnly Property Customers() As ObjectSet(Of Customer)
        Get
            If _customers Is Nothing Then
                _customers = CreateObjectSet(Of Customer)("Customers")
            End If
            Return _customers
        End Get
    End Property
    Private _customers As ObjectSet(Of Customer)

    Public ReadOnly Property CustomerAddresses() As ObjectSet(Of CustomerAddress)
        Get
            If _customerAddresses Is Nothing Then
                _customerAddresses = CreateObjectSet(Of CustomerAddress)("CustomerAddresses")
            End If
            Return _customerAddresses
        End Get
    End Property
    Private _customerAddresses As ObjectSet(Of CustomerAddress)

    Public ReadOnly Property Products() As ObjectSet(Of Product)
        Get
            If _products Is Nothing Then
                _products = CreateObjectSet(Of Product)("Products")
            End If
            Return _products
        End Get
    End Property
    Private _products As ObjectSet(Of Product)

    Public ReadOnly Property ProductCategories() As ObjectSet(Of ProductCategory)
        Get
            If _productCategories Is Nothing Then
                _productCategories = CreateObjectSet(Of ProductCategory)("ProductCategories")
            End If
            Return _productCategories
        End Get
    End Property
    Private _productCategories As ObjectSet(Of ProductCategory)

    Public ReadOnly Property ProductDescriptions() As ObjectSet(Of ProductDescription)
        Get
            If _productDescriptions Is Nothing Then
                _productDescriptions = CreateObjectSet(Of ProductDescription)("ProductDescriptions")
            End If
            Return _productDescriptions
        End Get
    End Property
    Private _productDescriptions As ObjectSet(Of ProductDescription)

    Public ReadOnly Property ProductModels() As ObjectSet(Of ProductModel)
        Get
            If _productModels Is Nothing Then
                _productModels = CreateObjectSet(Of ProductModel)("ProductModels")
            End If
            Return _productModels
        End Get
    End Property
    Private _productModels As ObjectSet(Of ProductModel)

    Public ReadOnly Property ProductModelProductDescriptions() As ObjectSet(Of ProductModelProductDescription)
        Get
            If _productModelProductDescriptions Is Nothing Then
                _productModelProductDescriptions = CreateObjectSet(Of ProductModelProductDescription)("ProductModelProductDescriptions")
            End If
            Return _productModelProductDescriptions
        End Get
    End Property
    Private _productModelProductDescriptions As ObjectSet(Of ProductModelProductDescription)

    Public ReadOnly Property SalesOrderDetails() As ObjectSet(Of SalesOrderDetail)
        Get
            If _salesOrderDetails Is Nothing Then
                _salesOrderDetails = CreateObjectSet(Of SalesOrderDetail)("SalesOrderDetails")
            End If
            Return _salesOrderDetails
        End Get
    End Property
    Private _salesOrderDetails As ObjectSet(Of SalesOrderDetail)

    Public ReadOnly Property SalesOrderHeaders() As ObjectSet(Of SalesOrderHeader)
        Get
            If _salesOrderHeaders Is Nothing Then
                _salesOrderHeaders = CreateObjectSet(Of SalesOrderHeader)("SalesOrderHeaders")
            End If
            Return _salesOrderHeaders
        End Get
    End Property
    Private _salesOrderHeaders As ObjectSet(Of SalesOrderHeader)

#End Region
End Class
