' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=False)>
<KnownType(GetType(Address))>
<KnownType(GetType(Customer))>
<KnownType(GetType(SalesOrderDetail))>
Partial Public Class SalesOrderHeader
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Primitive Properties"

    <DataMember()>
    Public Property SalesOrderID() As Integer
        Get
            Return _salesOrderID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_salesOrderID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("The property 'SalesOrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.")
                End If
                _salesOrderID = value
                OnPropertyChanged("SalesOrderID")
            End If
        End Set
    End Property

    Private _salesOrderID As Integer

    <DataMember()>
    Public Property RevisionNumber() As Byte
        Get
            Return _revisionNumber
        End Get
        Set(ByVal value As Byte)
            If Not Equals(_revisionNumber, value) Then
                _revisionNumber = value
                OnPropertyChanged("RevisionNumber")
            End If
        End Set
    End Property

    Private _revisionNumber As Byte

    <DataMember()>
    Public Property OrderDate() As Date
        Get
            Return _orderDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_orderDate, value) Then
                _orderDate = value
                OnPropertyChanged("OrderDate")
            End If
        End Set
    End Property

    Private _orderDate As Date

    <DataMember()>
    Public Property DueDate() As Date
        Get
            Return _dueDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_dueDate, value) Then
                _dueDate = value
                OnPropertyChanged("DueDate")
            End If
        End Set
    End Property

    Private _dueDate As Date

    <DataMember()>
    Public Property ShipDate() As Nullable(Of Date)
        Get
            Return _shipDate
        End Get
        Set(ByVal value As Nullable(Of Date))
            If Not Equals(_shipDate, value) Then
                _shipDate = value
                OnPropertyChanged("ShipDate")
            End If
        End Set
    End Property

    Private _shipDate As Nullable(Of Date)

    <DataMember()>
    Public Property Status() As Byte
        Get
            Return _status
        End Get
        Set(ByVal value As Byte)
            If Not Equals(_status, value) Then
                _status = value
                OnPropertyChanged("Status")
            End If
        End Set
    End Property

    Private _status As Byte

    <DataMember()>
    Public Property OnlineOrderFlag() As Boolean
        Get
            Return _onlineOrderFlag
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_onlineOrderFlag, value) Then
                _onlineOrderFlag = value
                OnPropertyChanged("OnlineOrderFlag")
            End If
        End Set
    End Property

    Private _onlineOrderFlag As Boolean

    <DataMember()>
    Public Property SalesOrderNumber() As String
        Get
            Return _salesOrderNumber
        End Get
        Set(ByVal value As String)
            If Not Equals(_salesOrderNumber, value) Then
                _salesOrderNumber = value
                OnPropertyChanged("SalesOrderNumber")
            End If
        End Set
    End Property

    Private _salesOrderNumber As String

    <DataMember()>
    Public Property PurchaseOrderNumber() As String
        Get
            Return _purchaseOrderNumber
        End Get
        Set(ByVal value As String)
            If Not Equals(_purchaseOrderNumber, value) Then
                _purchaseOrderNumber = value
                OnPropertyChanged("PurchaseOrderNumber")
            End If
        End Set
    End Property

    Private _purchaseOrderNumber As String

    <DataMember()>
    Public Property AccountNumber() As String
        Get
            Return _accountNumber
        End Get
        Set(ByVal value As String)
            If Not Equals(_accountNumber, value) Then
                _accountNumber = value
                OnPropertyChanged("AccountNumber")
            End If
        End Set
    End Property

    Private _accountNumber As String

    <DataMember()>
    Public Property CustomerID() As Integer
        Get
            Return _customerID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_customerID, value) Then
                ChangeTracker.RecordOriginalValue("CustomerID", _customerID)
                If Not IsDeserializing Then
                    If Customer IsNot Nothing AndAlso Not Equals(Customer.CustomerID, value) Then
                        Customer = Nothing
                    End If
                End If
                _customerID = value
                OnPropertyChanged("CustomerID")
            End If
        End Set
    End Property

    Private _customerID As Integer

    <DataMember()>
    Public Property ShipToAddressID() As Nullable(Of Integer)
        Get
            Return _shipToAddressID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_shipToAddressID, value) Then
                ChangeTracker.RecordOriginalValue("ShipToAddressID", _shipToAddressID)
                If Not IsDeserializing Then
                    If Address1 IsNot Nothing AndAlso Not Equals(Address1.AddressID, value) Then
                        Address1 = Nothing
                    End If
                End If
                _shipToAddressID = value
                OnPropertyChanged("ShipToAddressID")
            End If
        End Set
    End Property

    Private _shipToAddressID As Nullable(Of Integer)

    <DataMember()>
    Public Property BillToAddressID() As Nullable(Of Integer)
        Get
            Return _billToAddressID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_billToAddressID, value) Then
                ChangeTracker.RecordOriginalValue("BillToAddressID", _billToAddressID)
                If Not IsDeserializing Then
                    If Address IsNot Nothing AndAlso Not Equals(Address.AddressID, value) Then
                        Address = Nothing
                    End If
                End If
                _billToAddressID = value
                OnPropertyChanged("BillToAddressID")
            End If
        End Set
    End Property

    Private _billToAddressID As Nullable(Of Integer)

    <DataMember()>
    Public Property ShipMethod() As String
        Get
            Return _shipMethod
        End Get
        Set(ByVal value As String)
            If Not Equals(_shipMethod, value) Then
                _shipMethod = value
                OnPropertyChanged("ShipMethod")
            End If
        End Set
    End Property

    Private _shipMethod As String

    <DataMember()>
    Public Property CreditCardApprovalCode() As String
        Get
            Return _creditCardApprovalCode
        End Get
        Set(ByVal value As String)
            If Not Equals(_creditCardApprovalCode, value) Then
                _creditCardApprovalCode = value
                OnPropertyChanged("CreditCardApprovalCode")
            End If
        End Set
    End Property

    Private _creditCardApprovalCode As String

    <DataMember()>
    Public Property SubTotal() As Decimal
        Get
            Return _subTotal
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_subTotal, value) Then
                _subTotal = value
                OnPropertyChanged("SubTotal")
            End If
        End Set
    End Property

    Private _subTotal As Decimal

    <DataMember()>
    Public Property TaxAmt() As Decimal
        Get
            Return _taxAmt
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_taxAmt, value) Then
                _taxAmt = value
                OnPropertyChanged("TaxAmt")
            End If
        End Set
    End Property

    Private _taxAmt As Decimal

    <DataMember()>
    Public Property Freight() As Decimal
        Get
            Return _freight
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_freight, value) Then
                _freight = value
                OnPropertyChanged("Freight")
            End If
        End Set
    End Property

    Private _freight As Decimal

    <DataMember()>
    Public Property TotalDue() As Decimal
        Get
            Return _totalDue
        End Get
        Set(ByVal value As Decimal)
            If Not Equals(_totalDue, value) Then
                _totalDue = value
                OnPropertyChanged("TotalDue")
            End If
        End Set
    End Property

    Private _totalDue As Decimal

    <DataMember()>
    Public Property Comment() As String
        Get
            Return _comment
        End Get
        Set(ByVal value As String)
            If Not Equals(_comment, value) Then
                _comment = value
                OnPropertyChanged("Comment")
            End If
        End Set
    End Property

    Private _comment As String

    <DataMember()>
    Public Property rowguid() As System.Guid
        Get
            Return _rowguid
        End Get
        Set(ByVal value As System.Guid)
            If Not Equals(_rowguid, value) Then
                _rowguid = value
                OnPropertyChanged("rowguid")
            End If
        End Set
    End Property

    Private _rowguid As System.Guid

    <DataMember()>
    Public Property ModifiedDate() As Date
        Get
            Return _modifiedDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_modifiedDate, value) Then
                _modifiedDate = value
                OnPropertyChanged("ModifiedDate")
            End If
        End Set
    End Property

    Private _modifiedDate As Date

#End Region
#Region "Navigation Properties"

    <DataMember()>
    Public Property Address() As Address
        Get
            Return _address
        End Get
        Set(ByVal value As Address)
            If _address IsNot value Then
                Dim previousValue As Address = _address
                _address = value
                FixupAddress(previousValue)
                OnNavigationPropertyChanged("Address")
            End If
        End Set
    End Property

    Private _address As Address


    <DataMember()>
    Public Property Address1() As Address
        Get
            Return _address1
        End Get
        Set(ByVal value As Address)
            If _address1 IsNot value Then
                Dim previousValue As Address = _address1
                _address1 = value
                FixupAddress1(previousValue)
                OnNavigationPropertyChanged("Address1")
            End If
        End Set
    End Property

    Private _address1 As Address


    <DataMember()>
    Public Property Customer() As Customer
        Get
            Return _customer
        End Get
        Set(ByVal value As Customer)
            If _customer IsNot value Then
                Dim previousValue As Customer = _customer
                _customer = value
                FixupCustomer(previousValue)
                OnNavigationPropertyChanged("Customer")
            End If
        End Set
    End Property

    Private _customer As Customer


    <DataMember()>
    Public Property SalesOrderDetails() As TrackableCollection(Of SalesOrderDetail)
        Get
            If _salesOrderDetails Is Nothing Then
                _salesOrderDetails = New TrackableCollection(Of SalesOrderDetail)
                AddHandler _salesOrderDetails.CollectionChanged, AddressOf FixupSalesOrderDetails
            End If
            Return _salesOrderDetails
        End Get
        Set(ByVal value As TrackableCollection(Of SalesOrderDetail))
            If Not Object.ReferenceEquals(_salesOrderDetails, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled")
                End If
                If _salesOrderDetails IsNot Nothing Then
                    RemoveHandler _salesOrderDetails.CollectionChanged, AddressOf FixupSalesOrderDetails
                    ' This is the principal end in an association that performs cascade deletes.
                    ' Remove the cascade delete event handler for any entities in the current collection.
                    For Each item As SalesOrderDetail In _salesOrderDetails
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _salesOrderDetails = value
                If _salesOrderDetails IsNot Nothing Then
                    AddHandler _salesOrderDetails.CollectionChanged, AddressOf FixupSalesOrderDetails
                    ' This is the principal end in an association that performs cascade deletes.
                    ' Add the cascade delete event handler for any entities that are already in the new collection.
                    For Each item As SalesOrderDetail In _salesOrderDetails
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("SalesOrderDetails")
            End If
        End Set
    End Property

    Private _salesOrderDetails As TrackableCollection(Of SalesOrderDetail)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Address = Nothing
        Address1 = Nothing
        Customer = Nothing
        SalesOrderDetails.Clear()
    End Sub

#End Region
#Region "Association Fixup"

    Private Sub FixupAddress(ByVal previousValue As Address, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SalesOrderHeaders.Contains(Me) Then
            previousValue.SalesOrderHeaders.Remove(Me)
        End If

        If Address IsNot Nothing Then
            If Not Address.SalesOrderHeaders.Contains(Me) Then
                Address.SalesOrderHeaders.Add(Me)
            End If

            BillToAddressID = Address.AddressID
        ElseIf Not skipKeys Then
            BillToAddressID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Address") AndAlso
                ChangeTracker.OriginalValues("Address") Is Address Then
                ChangeTracker.OriginalValues.Remove("Address")
            Else
                ChangeTracker.RecordOriginalValue("Address", previousValue)
            End If
            If Address IsNot Nothing AndAlso Not Address.ChangeTracker.ChangeTrackingEnabled Then
                Address.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupAddress1(ByVal previousValue As Address, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SalesOrderHeaders1.Contains(Me) Then
            previousValue.SalesOrderHeaders1.Remove(Me)
        End If

        If Address1 IsNot Nothing Then
            If Not Address1.SalesOrderHeaders1.Contains(Me) Then
                Address1.SalesOrderHeaders1.Add(Me)
            End If

            ShipToAddressID = Address1.AddressID
        ElseIf Not skipKeys Then
            ShipToAddressID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Address1") AndAlso
                ChangeTracker.OriginalValues("Address1") Is Address1 Then
                ChangeTracker.OriginalValues.Remove("Address1")
            Else
                ChangeTracker.RecordOriginalValue("Address1", previousValue)
            End If
            If Address1 IsNot Nothing AndAlso Not Address1.ChangeTracker.ChangeTrackingEnabled Then
                Address1.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCustomer(ByVal previousValue As Customer)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.SalesOrderHeaders.Contains(Me) Then
            previousValue.SalesOrderHeaders.Remove(Me)
        End If

        If Customer IsNot Nothing Then
            If Not Customer.SalesOrderHeaders.Contains(Me) Then
                Customer.SalesOrderHeaders.Add(Me)
            End If

            CustomerID = Customer.CustomerID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Customer") AndAlso
                ChangeTracker.OriginalValues("Customer") Is Customer Then
                ChangeTracker.OriginalValues.Remove("Customer")
            Else
                ChangeTracker.RecordOriginalValue("Customer", previousValue)
            End If
            If Customer IsNot Nothing AndAlso Not Customer.ChangeTracker.ChangeTrackingEnabled Then
                Customer.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupSalesOrderDetails(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SalesOrderDetail In e.NewItems
                item.SalesOrderHeader = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SalesOrderDetails", item)
                End If
                ' This is the principal end in an association that performs cascade deletes.
                ' Update the event listener to refer to the new dependent.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SalesOrderDetail In e.OldItems
                If ReferenceEquals(item.SalesOrderHeader, Me) Then
                    item.SalesOrderHeader = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SalesOrderDetails", item)
                    ' Delete the dependent end of this identifying association. If the current state is Added,
                    ' allow the relationship to be changed without causing the dependent to be deleted.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' This is the principal end in an association that performs cascade deletes.
                ' Remove the previous dependent from the event listener.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

#End Region
End Class
