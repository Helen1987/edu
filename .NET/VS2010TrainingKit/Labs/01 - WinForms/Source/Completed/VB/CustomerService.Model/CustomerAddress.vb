' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=False)>
<KnownType(GetType(Address))>
<KnownType(GetType(Customer))>
Partial Public Class CustomerAddress
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Primitive Properties"

    <DataMember()>
    Public Property CustomerID() As Integer
        Get
            Return _customerID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_customerID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("The property 'CustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.")
                End If
                If Not IsDeserializing Then
                    If Customer IsNot Nothing AndAlso Not Equals(Customer.CustomerID, value) Then
                        Customer = Nothing
                    End If
                End If
                _customerID = value
                OnPropertyChanged("CustomerID")
            End If
        End Set
    End Property

    Private _customerID As Integer

    <DataMember()>
    Public Property AddressID() As Integer
        Get
            Return _addressID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_addressID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("The property 'AddressID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.")
                End If
                If Not IsDeserializing Then
                    If Address IsNot Nothing AndAlso Not Equals(Address.AddressID, value) Then
                        Address = Nothing
                    End If
                End If
                _addressID = value
                OnPropertyChanged("AddressID")
            End If
        End Set
    End Property

    Private _addressID As Integer

    <DataMember()>
    Public Property AddressType() As String
        Get
            Return _addressType
        End Get
        Set(ByVal value As String)
            If Not Equals(_addressType, value) Then
                _addressType = value
                OnPropertyChanged("AddressType")
            End If
        End Set
    End Property

    Private _addressType As String

    <DataMember()>
    Public Property rowguid() As System.Guid
        Get
            Return _rowguid
        End Get
        Set(ByVal value As System.Guid)
            If Not Equals(_rowguid, value) Then
                _rowguid = value
                OnPropertyChanged("rowguid")
            End If
        End Set
    End Property

    Private _rowguid As System.Guid

    <DataMember()>
    Public Property ModifiedDate() As Date
        Get
            Return _modifiedDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_modifiedDate, value) Then
                _modifiedDate = value
                OnPropertyChanged("ModifiedDate")
            End If
        End Set
    End Property

    Private _modifiedDate As Date

#End Region
#Region "Navigation Properties"

    <DataMember()>
    Public Property Address() As Address
        Get
            Return _address
        End Get
        Set(ByVal value As Address)
            If _address IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                    ' otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                    If Not Equals(AddressID, value.AddressID) Then
                        Throw New InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.")
                    End If
                End If
                Dim previousValue As Address = _address
                _address = value
                FixupAddress(previousValue)
                OnNavigationPropertyChanged("Address")
            End If
        End Set
    End Property

    Private _address As Address


    <DataMember()>
    Public Property Customer() As Customer
        Get
            Return _customer
        End Get
        Set(ByVal value As Customer)
            If _customer IsNot value Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added AndAlso value IsNot Nothing Then
                    ' This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                    ' otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                    If Not Equals(CustomerID, value.CustomerID) Then
                        Throw New InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.")
                    End If
                End If
                Dim previousValue As Customer = _customer
                _customer = value
                FixupCustomer(previousValue)
                OnNavigationPropertyChanged("Customer")
            End If
        End Set
    End Property

    Private _customer As Customer


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    ' This entity type is the dependent end in at least one association that performs cascade deletes.
    ' This event handler will process notifications that occur when the principal end is deleted.
    Friend Sub HandleCascadeDelete(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.MarkAsDeleted()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Address = Nothing
        Customer = Nothing
    End Sub

#End Region
#Region "Association Fixup"

    Private Sub FixupAddress(ByVal previousValue As Address)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CustomerAddresses.Contains(Me) Then
            previousValue.CustomerAddresses.Remove(Me)
        End If

        If Address IsNot Nothing Then
            If Not Address.CustomerAddresses.Contains(Me) Then
                Address.CustomerAddresses.Add(Me)
            End If

            AddressID = Address.AddressID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Address") AndAlso
                ChangeTracker.OriginalValues("Address") Is Address Then
                ChangeTracker.OriginalValues.Remove("Address")
            Else
                ChangeTracker.RecordOriginalValue("Address", previousValue)
            End If
            If Address IsNot Nothing AndAlso Not Address.ChangeTracker.ChangeTrackingEnabled Then
                Address.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupCustomer(ByVal previousValue As Customer)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.CustomerAddresses.Contains(Me) Then
            previousValue.CustomerAddresses.Remove(Me)
        End If

        If Customer IsNot Nothing Then
            If Not Customer.CustomerAddresses.Contains(Me) Then
                Customer.CustomerAddresses.Add(Me)
            End If

            CustomerID = Customer.CustomerID
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("Customer") AndAlso
                ChangeTracker.OriginalValues("Customer") Is Customer Then
                ChangeTracker.OriginalValues.Remove("Customer")
            Else
                ChangeTracker.RecordOriginalValue("Customer", previousValue)
            End If
            If Customer IsNot Nothing AndAlso Not Customer.ChangeTracker.ChangeTrackingEnabled Then
                Customer.StartTracking()
            End If
        End If
    End Sub

#End Region
End Class
