' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(Product))>
<KnownType(GetType(ProductCategory))>
Partial Public Class ProductCategory
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Primitive Properties"

    <DataMember()>
    Public Property ProductCategoryID() As Integer
        Get
            Return _productCategoryID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_productCategoryID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("The property 'ProductCategoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.")
                End If
                _productCategoryID = value
                OnPropertyChanged("ProductCategoryID")
            End If
        End Set
    End Property

    Private _productCategoryID As Integer

    <DataMember()>
    Public Property ParentProductCategoryID() As Nullable(Of Integer)
        Get
            Return _parentProductCategoryID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            If Not Equals(_parentProductCategoryID, value) Then
                ChangeTracker.RecordOriginalValue("ParentProductCategoryID", _parentProductCategoryID)
                If Not IsDeserializing Then
                    If ProductCategory2 IsNot Nothing AndAlso Not Equals(ProductCategory2.ProductCategoryID, value) Then
                        ProductCategory2 = Nothing
                    End If
                End If
                _parentProductCategoryID = value
                OnPropertyChanged("ParentProductCategoryID")
            End If
        End Set
    End Property

    Private _parentProductCategoryID As Nullable(Of Integer)

    <DataMember()>
    Public Property Name() As String
        Get
            Return _name
        End Get
        Set(ByVal value As String)
            If Not Equals(_name, value) Then
                _name = value
                OnPropertyChanged("Name")
            End If
        End Set
    End Property

    Private _name As String

    <DataMember()>
    Public Property rowguid() As System.Guid
        Get
            Return _rowguid
        End Get
        Set(ByVal value As System.Guid)
            If Not Equals(_rowguid, value) Then
                _rowguid = value
                OnPropertyChanged("rowguid")
            End If
        End Set
    End Property

    Private _rowguid As System.Guid

    <DataMember()>
    Public Property ModifiedDate() As Date
        Get
            Return _modifiedDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_modifiedDate, value) Then
                _modifiedDate = value
                OnPropertyChanged("ModifiedDate")
            End If
        End Set
    End Property

    Private _modifiedDate As Date

#End Region
#Region "Navigation Properties"

    <DataMember()>
    Public Property Products() As TrackableCollection(Of Product)
        Get
            If _products Is Nothing Then
                _products = New TrackableCollection(Of Product)
                AddHandler _products.CollectionChanged, AddressOf FixupProducts
            End If
            Return _products
        End Get
        Set(ByVal value As TrackableCollection(Of Product))
            If Not Object.ReferenceEquals(_products, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled")
                End If
                If _products IsNot Nothing Then
                    RemoveHandler _products.CollectionChanged, AddressOf FixupProducts
                End If
                _products = value
                If _products IsNot Nothing Then
                    AddHandler _products.CollectionChanged, AddressOf FixupProducts
                End If
                OnNavigationPropertyChanged("Products")
            End If
        End Set
    End Property

    Private _products As TrackableCollection(Of Product)

    <DataMember()>
    Public Property ProductCategory1() As TrackableCollection(Of ProductCategory)
        Get
            If _productCategory1 Is Nothing Then
                _productCategory1 = New TrackableCollection(Of ProductCategory)
                AddHandler _productCategory1.CollectionChanged, AddressOf FixupProductCategory1
            End If
            Return _productCategory1
        End Get
        Set(ByVal value As TrackableCollection(Of ProductCategory))
            If Not Object.ReferenceEquals(_productCategory1, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled")
                End If
                If _productCategory1 IsNot Nothing Then
                    RemoveHandler _productCategory1.CollectionChanged, AddressOf FixupProductCategory1
                End If
                _productCategory1 = value
                If _productCategory1 IsNot Nothing Then
                    AddHandler _productCategory1.CollectionChanged, AddressOf FixupProductCategory1
                End If
                OnNavigationPropertyChanged("ProductCategory1")
            End If
        End Set
    End Property

    Private _productCategory1 As TrackableCollection(Of ProductCategory)

    <DataMember()>
    Public Property ProductCategory2() As ProductCategory
        Get
            Return _productCategory2
        End Get
        Set(ByVal value As ProductCategory)
            If _productCategory2 IsNot value Then
                Dim previousValue As ProductCategory = _productCategory2
                _productCategory2 = value
                FixupProductCategory2(previousValue)
                OnNavigationPropertyChanged("ProductCategory2")
            End If
        End Set
    End Property

    Private _productCategory2 As ProductCategory


#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        Products.Clear()
        ProductCategory1.Clear()
        ProductCategory2 = Nothing
    End Sub

#End Region
#Region "Association Fixup"

    Private Sub FixupProductCategory2(ByVal previousValue As ProductCategory, Optional ByVal skipKeys As Boolean = False)
        If IsDeserializing Then
            Return
        End If

        If previousValue IsNot Nothing AndAlso previousValue.ProductCategory1.Contains(Me) Then
            previousValue.ProductCategory1.Remove(Me)
        End If

        If ProductCategory2 IsNot Nothing Then
            If Not ProductCategory2.ProductCategory1.Contains(Me) Then
                ProductCategory2.ProductCategory1.Add(Me)
            End If

            ParentProductCategoryID = ProductCategory2.ProductCategoryID
        ElseIf Not skipKeys Then
            ParentProductCategoryID = Nothing
        End If
        If ChangeTracker.ChangeTrackingEnabled Then
            If ChangeTracker.OriginalValues.ContainsKey("ProductCategory2") AndAlso
                ChangeTracker.OriginalValues("ProductCategory2") Is ProductCategory2 Then
                ChangeTracker.OriginalValues.Remove("ProductCategory2")
            Else
                ChangeTracker.RecordOriginalValue("ProductCategory2", previousValue)
            End If
            If ProductCategory2 IsNot Nothing AndAlso Not ProductCategory2.ChangeTracker.ChangeTrackingEnabled Then
                ProductCategory2.StartTracking()
            End If
        End If
    End Sub

    Private Sub FixupProducts(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As Product In e.NewItems
                item.ProductCategory = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("Products", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As Product In e.OldItems
                If ReferenceEquals(item.ProductCategory, Me) Then
                    item.ProductCategory = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("Products", item)
                End If
            Next
        End If
    End Sub

    Private Sub FixupProductCategory1(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As ProductCategory In e.NewItems
                item.ProductCategory2 = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("ProductCategory1", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As ProductCategory In e.OldItems
                If ReferenceEquals(item.ProductCategory2, Me) Then
                    item.ProductCategory2 = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("ProductCategory1", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
