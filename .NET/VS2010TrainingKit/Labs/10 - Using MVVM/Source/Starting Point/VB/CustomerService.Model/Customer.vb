' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized
Imports System.ComponentModel
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Runtime.CompilerServices

<DataContract(IsReference:=True)>
<KnownType(GetType(CustomerAddress))>
<KnownType(GetType(SalesOrderHeader))>
Partial Public Class Customer
    Implements IObjectWithChangeTracker
    Implements INotifyPropertyChanged

#Region "Primitive Properties"

    <DataMember()>
    Public Property CustomerID() As Integer
        Get
            Return _customerID
        End Get
        Set(ByVal value As Integer)
            If Not Equals(_customerID, value) Then
                If ChangeTracker.ChangeTrackingEnabled AndAlso ChangeTracker.State <> ObjectState.Added Then
                    Throw New InvalidOperationException("The property 'CustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.")
                End If
                _customerID = value
                OnPropertyChanged("CustomerID")
            End If
        End Set
    End Property

    Private _customerID As Integer

    <DataMember()>
    Public Property NameStyle() As Boolean
        Get
            Return _nameStyle
        End Get
        Set(ByVal value As Boolean)
            If Not Equals(_nameStyle, value) Then
                _nameStyle = value
                OnPropertyChanged("NameStyle")
            End If
        End Set
    End Property

    Private _nameStyle As Boolean

    <DataMember()>
    Public Property Title() As String
        Get
            Return _title
        End Get
        Set(ByVal value As String)
            If Not Equals(_title, value) Then
                _title = value
                OnPropertyChanged("Title")
            End If
        End Set
    End Property

    Private _title As String

    <DataMember()>
    Public Property FirstName() As String
        Get
            Return _firstName
        End Get
        Set(ByVal value As String)
            If Not Equals(_firstName, value) Then
                _firstName = value
                OnPropertyChanged("FirstName")
            End If
        End Set
    End Property

    Private _firstName As String

    <DataMember()>
    Public Property MiddleName() As String
        Get
            Return _middleName
        End Get
        Set(ByVal value As String)
            If Not Equals(_middleName, value) Then
                _middleName = value
                OnPropertyChanged("MiddleName")
            End If
        End Set
    End Property

    Private _middleName As String

    <DataMember()>
    Public Property LastName() As String
        Get
            Return _lastName
        End Get
        Set(ByVal value As String)
            If Not Equals(_lastName, value) Then
                _lastName = value
                OnPropertyChanged("LastName")
            End If
        End Set
    End Property

    Private _lastName As String

    <DataMember()>
    Public Property Suffix() As String
        Get
            Return _suffix
        End Get
        Set(ByVal value As String)
            If Not Equals(_suffix, value) Then
                _suffix = value
                OnPropertyChanged("Suffix")
            End If
        End Set
    End Property

    Private _suffix As String

    <DataMember()>
    Public Property CompanyName() As String
        Get
            Return _companyName
        End Get
        Set(ByVal value As String)
            If Not Equals(_companyName, value) Then
                _companyName = value
                OnPropertyChanged("CompanyName")
            End If
        End Set
    End Property

    Private _companyName As String

    <DataMember()>
    Public Property SalesPerson() As String
        Get
            Return _salesPerson
        End Get
        Set(ByVal value As String)
            If Not Equals(_salesPerson, value) Then
                _salesPerson = value
                OnPropertyChanged("SalesPerson")
            End If
        End Set
    End Property

    Private _salesPerson As String

    <DataMember()>
    Public Property EmailAddress() As String
        Get
            Return _emailAddress
        End Get
        Set(ByVal value As String)
            If Not Equals(_emailAddress, value) Then
                _emailAddress = value
                OnPropertyChanged("EmailAddress")
            End If
        End Set
    End Property

    Private _emailAddress As String

    <DataMember()>
    Public Property Phone() As String
        Get
            Return _phone
        End Get
        Set(ByVal value As String)
            If Not Equals(_phone, value) Then
                _phone = value
                OnPropertyChanged("Phone")
            End If
        End Set
    End Property

    Private _phone As String

    <DataMember()>
    Public Property PasswordHash() As String
        Get
            Return _passwordHash
        End Get
        Set(ByVal value As String)
            If Not Equals(_passwordHash, value) Then
                _passwordHash = value
                OnPropertyChanged("PasswordHash")
            End If
        End Set
    End Property

    Private _passwordHash As String

    <DataMember()>
    Public Property PasswordSalt() As String
        Get
            Return _passwordSalt
        End Get
        Set(ByVal value As String)
            If Not Equals(_passwordSalt, value) Then
                _passwordSalt = value
                OnPropertyChanged("PasswordSalt")
            End If
        End Set
    End Property

    Private _passwordSalt As String

    <DataMember()>
    Public Property rowguid() As System.Guid
        Get
            Return _rowguid
        End Get
        Set(ByVal value As System.Guid)
            If Not Equals(_rowguid, value) Then
                _rowguid = value
                OnPropertyChanged("rowguid")
            End If
        End Set
    End Property

    Private _rowguid As System.Guid

    <DataMember()>
    Public Property ModifiedDate() As Date
        Get
            Return _modifiedDate
        End Get
        Set(ByVal value As Date)
            If Not Equals(_modifiedDate, value) Then
                _modifiedDate = value
                OnPropertyChanged("ModifiedDate")
            End If
        End Set
    End Property

    Private _modifiedDate As Date

#End Region
#Region "Navigation Properties"

    <DataMember()>
    Public Property CustomerAddresses() As TrackableCollection(Of CustomerAddress)
        Get
            If _customerAddresses Is Nothing Then
                _customerAddresses = New TrackableCollection(Of CustomerAddress)
                AddHandler _customerAddresses.CollectionChanged, AddressOf FixupCustomerAddresses
            End If
            Return _customerAddresses
        End Get
        Set(ByVal value As TrackableCollection(Of CustomerAddress))
            If Not Object.ReferenceEquals(_customerAddresses, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled")
                End If
                If _customerAddresses IsNot Nothing Then
                    RemoveHandler _customerAddresses.CollectionChanged, AddressOf FixupCustomerAddresses
                    ' This is the principal end in an association that performs cascade deletes.
                    ' Remove the cascade delete event handler for any entities in the current collection.
                    For Each item As CustomerAddress In _customerAddresses
                        RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                _customerAddresses = value
                If _customerAddresses IsNot Nothing Then
                    AddHandler _customerAddresses.CollectionChanged, AddressOf FixupCustomerAddresses
                    ' This is the principal end in an association that performs cascade deletes.
                    ' Add the cascade delete event handler for any entities that are already in the new collection.
                    For Each item As CustomerAddress In _customerAddresses
                        AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
                    Next
                End If
                OnNavigationPropertyChanged("CustomerAddresses")
            End If
        End Set
    End Property

    Private _customerAddresses As TrackableCollection(Of CustomerAddress)

    <DataMember()>
    Public Property SalesOrderHeaders() As TrackableCollection(Of SalesOrderHeader)
        Get
            If _salesOrderHeaders Is Nothing Then
                _salesOrderHeaders = New TrackableCollection(Of SalesOrderHeader)
                AddHandler _salesOrderHeaders.CollectionChanged, AddressOf FixupSalesOrderHeaders
            End If
            Return _salesOrderHeaders
        End Get
        Set(ByVal value As TrackableCollection(Of SalesOrderHeader))
            If Not Object.ReferenceEquals(_salesOrderHeaders, value) Then
                If ChangeTracker.ChangeTrackingEnabled Then
                    Throw New InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled")
                End If
                If _salesOrderHeaders IsNot Nothing Then
                    RemoveHandler _salesOrderHeaders.CollectionChanged, AddressOf FixupSalesOrderHeaders
                End If
                _salesOrderHeaders = value
                If _salesOrderHeaders IsNot Nothing Then
                    AddHandler _salesOrderHeaders.CollectionChanged, AddressOf FixupSalesOrderHeaders
                End If
                OnNavigationPropertyChanged("SalesOrderHeaders")
            End If
        End Set
    End Property

    Private _salesOrderHeaders As TrackableCollection(Of SalesOrderHeader)

#End Region
#Region "ChangeTracking"

    Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
        If ChangeTracker.State <> ObjectState.Added AndAlso ChangeTracker.State <> ObjectState.Deleted Then
            ChangeTracker.State = ObjectState.Modified
        End If
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Protected Overridable Sub OnNavigationPropertyChanged(ByVal propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

    Private Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Private _changeTracker As ObjectChangeTracker

    <DataMember()>
    Public Property ChangeTracker() As ObjectChangeTracker Implements IObjectWithChangeTracker.ChangeTracker
        Get
            If _changeTracker Is Nothing Then
                _changeTracker = New ObjectChangeTracker()
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            Return _changeTracker
        End Get
        Set(ByVal value As ObjectChangeTracker)
            If _changeTracker IsNot Nothing Then
                RemoveHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
            _changeTracker = value
            If _changeTracker IsNot Nothing Then
                AddHandler _changeTracker.ObjectStateChanging, AddressOf HandleObjectStateChanging
            End If
        End Set
    End Property

    Private Sub HandleObjectStateChanging(ByVal sender As Object, ByVal e As ObjectStateChangingEventArgs)
        If e.NewState = ObjectState.Deleted Then
            Me.ClearNavigationProperties()
        End If
    End Sub

    Private _isDeserializing As Boolean
    Protected Property IsDeserializing() As Boolean
        Get
            Return _isDeserializing
        End Get
        Private Set(ByVal value As Boolean)
            _isDeserializing = value
        End Set
    End Property

    <OnDeserializing()>
    Public Sub OnDeserializingMethod(ByVal context As StreamingContext)
        IsDeserializing = True
    End Sub

    <OnDeserialized()>
    Public Sub OnDeserializedMethod(ByVal context As StreamingContext)
        IsDeserializing = False
        ChangeTracker.ChangeTrackingEnabled = True
    End Sub

    Protected Overridable Sub ClearNavigationProperties()
        CustomerAddresses.Clear()
        SalesOrderHeaders.Clear()
    End Sub

#End Region
#Region "Association Fixup"

    Private Sub FixupCustomerAddresses(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As CustomerAddress In e.NewItems
                item.Customer = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("CustomerAddresses", item)
                End If
                ' This is the principal end in an association that performs cascade deletes.
                ' Update the event listener to refer to the new dependent.
                AddHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As CustomerAddress In e.OldItems
                If ReferenceEquals(item.Customer, Me) Then
                    item.Customer = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("CustomerAddresses", item)
                    ' Delete the dependent end of this identifying association. If the current state is Added,
                    ' allow the relationship to be changed without causing the dependent to be deleted.
                    If item.ChangeTracker.State <> ObjectState.Added Then
                        item.MarkAsDeleted()
                    End If
                End If
                ' This is the principal end in an association that performs cascade deletes.
                ' Remove the previous dependent from the event listener.
                RemoveHandler ChangeTracker.ObjectStateChanging, AddressOf item.HandleCascadeDelete
            Next
        End If
    End Sub

    Private Sub FixupSalesOrderHeaders(ByVal sender As Object, ByVal e As NotifyCollectionChangedEventArgs)
        If IsDeserializing Then
            Return
        End If

        If e.NewItems IsNot Nothing Then
            For Each item As SalesOrderHeader In e.NewItems
                item.Customer = Me
                If ChangeTracker.ChangeTrackingEnabled Then
                    If Not item.ChangeTracker.ChangeTrackingEnabled Then
                        item.StartTracking()
                    End If
                    ChangeTracker.RecordAdditionToCollectionProperties("SalesOrderHeaders", item)
                End If
            Next
        End If

        If e.OldItems IsNot Nothing Then
            For Each item As SalesOrderHeader In e.OldItems
                If ReferenceEquals(item.Customer, Me) Then
                    item.Customer = Nothing
                End If
                If ChangeTracker.ChangeTrackingEnabled Then
                    ChangeTracker.RecordRemovalFromCollectionProperties("SalesOrderHeaders", item)
                End If
            Next
        End If
    End Sub

#End Region
End Class
