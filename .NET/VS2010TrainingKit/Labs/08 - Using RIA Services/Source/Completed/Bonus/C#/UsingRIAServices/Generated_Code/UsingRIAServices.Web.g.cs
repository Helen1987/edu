// ----------------------------------------------------------------------------------
// Microsoft Developer & Platform Evangelism
// 
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
// EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
// OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// ----------------------------------------------------------------------------------
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
// ----------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsingRIAServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using UsingRIAServices.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace UsingRIAServices.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AuthenticationService' domain service.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("UsingRIAServices-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(UsingRIAServices.Web.Resources.RegistrationDataResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidEmail' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RegularExpressionAttribute("^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$", ErrorMessageResourceName = "ValidationErrorInvalidEmail", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(UsingRIAServices.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadFriendlyNameLength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(UsingRIAServices.Web.Resources.RegistrationDataResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(UsingRIAServices.Web.Resources.RegistrationDataResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorInvalidUserName' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RegularExpressionAttribute("^[a-zA-Z0-9_]*$", ErrorMessageResourceName = "ValidationErrorInvalidUserName", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadUserNameLength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [StringLengthAttribute(255, ErrorMessageResourceName = "ValidationErrorBadUserNameLength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources), MinimumLength = 4)]
        // 
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(UsingRIAServices.Web.Resources.RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _displayName;
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaisePropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'UserRegistrationService' domain service.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("UsingRIAServices-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        // Unable to generate the following attribute(s) for parameter 'password' due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorBadPasswordStrength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RegularExpressionAttribute("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName = "ValidationErrorBadPasswordStrength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadPasswordLength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [StringLengthAttribute(50, ErrorMessageResourceName = "ValidationErrorBadPasswordLength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources), MinimumLength = 7)]
        // 
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the domain service.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        // Unable to generate the following attribute(s) for parameter 'password' due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RegularExpressionAttribute' references a property 'ValidationErrorBadPasswordStrength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RegularExpressionAttribute("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName = "ValidationErrorBadPasswordStrength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.RequiredAttribute' references a property 'ValidationErrorRequiredField' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [RequiredAttribute(ErrorMessageResourceName = "ValidationErrorRequiredField", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources))]
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.StringLengthAttribute' references a property 'ValidationErrorBadPasswordLength' on type 'UsingRIAServices.Web.Resources.ValidationErrorResources' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [StringLengthAttribute(50, ErrorMessageResourceName = "ValidationErrorBadPasswordLength", ErrorMessageResourceType = typeof(UsingRIAServices.Web.Resources.ValidationErrorResources), MinimumLength = 7)]
        // 
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
namespace UsingRIAServices.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web.Models")]
    public sealed partial class Customer : Entity
    {
        
        private string _companyName;
        
        private int _customerID;
        
        private string _emailAddress;
        
        private string _firstName;
        
        private string _lastName;
        
        private string _middleName;
        
        private DateTime _modifiedDate;
        
        private bool _nameStyle;
        
        private string _passwordHash;
        
        private string _passwordSalt;
        
        private string _phone;
        
        private Guid _rowguid;
        
        private string _salesPerson;
        
        private string _suffix;
        
        private string _title;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnNameStyleChanging(bool value);
        partial void OnNameStyleChanged();
        partial void OnPasswordHashChanging(string value);
        partial void OnPasswordHashChanged();
        partial void OnPasswordSaltChanging(string value);
        partial void OnPasswordSaltChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnrowguidChanging(Guid value);
        partial void OnrowguidChanged();
        partial void OnSalesPersonChanging(string value);
        partial void OnSalesPersonChanged();
        partial void OnSuffixChanging(string value);
        partial void OnSuffixChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaisePropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiddleName' value.
        /// </summary>
        [DataMember()]
        public string MiddleName
        {
            get
            {
                return this._middleName;
            }
            set
            {
                if ((this._middleName != value))
                {
                    this.OnMiddleNameChanging(value);
                    this.RaiseDataMemberChanging("MiddleName");
                    this.ValidateProperty("MiddleName", value);
                    this._middleName = value;
                    this.RaiseDataMemberChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NameStyle' value.
        /// </summary>
        [DataMember()]
        public bool NameStyle
        {
            get
            {
                return this._nameStyle;
            }
            set
            {
                if ((this._nameStyle != value))
                {
                    this.OnNameStyleChanging(value);
                    this.RaiseDataMemberChanging("NameStyle");
                    this.ValidateProperty("NameStyle", value);
                    this._nameStyle = value;
                    this.RaiseDataMemberChanged("NameStyle");
                    this.OnNameStyleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordHash' value.
        /// </summary>
        [DataMember()]
        public string PasswordHash
        {
            get
            {
                return this._passwordHash;
            }
            set
            {
                if ((this._passwordHash != value))
                {
                    this.OnPasswordHashChanging(value);
                    this.RaiseDataMemberChanging("PasswordHash");
                    this.ValidateProperty("PasswordHash", value);
                    this._passwordHash = value;
                    this.RaiseDataMemberChanged("PasswordHash");
                    this.OnPasswordHashChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordSalt' value.
        /// </summary>
        [DataMember()]
        public string PasswordSalt
        {
            get
            {
                return this._passwordSalt;
            }
            set
            {
                if ((this._passwordSalt != value))
                {
                    this.OnPasswordSaltChanging(value);
                    this.RaiseDataMemberChanging("PasswordSalt");
                    this.ValidateProperty("PasswordSalt", value);
                    this._passwordSalt = value;
                    this.RaiseDataMemberChanged("PasswordSalt");
                    this.OnPasswordSaltChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'rowguid' value.
        /// </summary>
        [DataMember()]
        public Guid rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnrowguidChanging(value);
                    this.RaiseDataMemberChanging("rowguid");
                    this.ValidateProperty("rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("rowguid");
                    this.OnrowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesPerson' value.
        /// </summary>
        [DataMember()]
        public string SalesPerson
        {
            get
            {
                return this._salesPerson;
            }
            set
            {
                if ((this._salesPerson != value))
                {
                    this.OnSalesPersonChanging(value);
                    this.RaiseDataMemberChanging("SalesPerson");
                    this.ValidateProperty("SalesPerson", value);
                    this._salesPerson = value;
                    this.RaiseDataMemberChanged("SalesPerson");
                    this.OnSalesPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Suffix' value.
        /// </summary>
        [DataMember()]
        public string Suffix
        {
            get
            {
                return this._suffix;
            }
            set
            {
                if ((this._suffix != value))
                {
                    this.OnSuffixChanging(value);
                    this.RaiseDataMemberChanging("Suffix");
                    this.ValidateProperty("Suffix", value);
                    this._suffix = value;
                    this.RaiseDataMemberChanged("Suffix");
                    this.OnSuffixChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._customerID;
        }
    }
    
    /// <summary>
    /// The 'SalesOrderHeader' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web.Models")]
    public sealed partial class SalesOrderHeader : Entity
    {
        
        private string _accountNumber;
        
        private Nullable<int> _billToAddressID;
        
        private string _comment;
        
        private string _creditCardApprovalCode;
        
        private int _customerID;
        
        private DateTime _dueDate;
        
        private decimal _freight;
        
        private DateTime _modifiedDate;
        
        private bool _onlineOrderFlag;
        
        private DateTime _orderDate;
        
        private string _purchaseOrderNumber;
        
        private byte _revisionNumber;
        
        private Guid _rowguid;
        
        private int _salesOrderID;
        
        private string _salesOrderNumber;
        
        private Nullable<DateTime> _shipDate;
        
        private string _shipMethod;
        
        private Nullable<int> _shipToAddressID;
        
        private byte _status;
        
        private decimal _subTotal;
        
        private decimal _taxAmt;
        
        private decimal _totalDue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        partial void OnBillToAddressIDChanging(Nullable<int> value);
        partial void OnBillToAddressIDChanged();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCreditCardApprovalCodeChanging(string value);
        partial void OnCreditCardApprovalCodeChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnDueDateChanging(DateTime value);
        partial void OnDueDateChanged();
        partial void OnFreightChanging(decimal value);
        partial void OnFreightChanged();
        partial void OnModifiedDateChanging(DateTime value);
        partial void OnModifiedDateChanged();
        partial void OnOnlineOrderFlagChanging(bool value);
        partial void OnOnlineOrderFlagChanged();
        partial void OnOrderDateChanging(DateTime value);
        partial void OnOrderDateChanged();
        partial void OnPurchaseOrderNumberChanging(string value);
        partial void OnPurchaseOrderNumberChanged();
        partial void OnRevisionNumberChanging(byte value);
        partial void OnRevisionNumberChanged();
        partial void OnrowguidChanging(Guid value);
        partial void OnrowguidChanged();
        partial void OnSalesOrderIDChanging(int value);
        partial void OnSalesOrderIDChanged();
        partial void OnSalesOrderNumberChanging(string value);
        partial void OnSalesOrderNumberChanged();
        partial void OnShipDateChanging(Nullable<DateTime> value);
        partial void OnShipDateChanged();
        partial void OnShipMethodChanging(string value);
        partial void OnShipMethodChanged();
        partial void OnShipToAddressIDChanging(Nullable<int> value);
        partial void OnShipToAddressIDChanged();
        partial void OnStatusChanging(byte value);
        partial void OnStatusChanged();
        partial void OnSubTotalChanging(decimal value);
        partial void OnSubTotalChanged();
        partial void OnTaxAmtChanging(decimal value);
        partial void OnTaxAmtChanged();
        partial void OnTotalDueChanging(decimal value);
        partial void OnTotalDueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderHeader"/> class.
        /// </summary>
        public SalesOrderHeader()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccountNumber' value.
        /// </summary>
        [DataMember()]
        public string AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                if ((this._accountNumber != value))
                {
                    this.OnAccountNumberChanging(value);
                    this.RaiseDataMemberChanging("AccountNumber");
                    this.ValidateProperty("AccountNumber", value);
                    this._accountNumber = value;
                    this.RaiseDataMemberChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BillToAddressID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BillToAddressID
        {
            get
            {
                return this._billToAddressID;
            }
            set
            {
                if ((this._billToAddressID != value))
                {
                    this.OnBillToAddressIDChanging(value);
                    this.RaiseDataMemberChanging("BillToAddressID");
                    this.ValidateProperty("BillToAddressID", value);
                    this._billToAddressID = value;
                    this.RaiseDataMemberChanged("BillToAddressID");
                    this.OnBillToAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreditCardApprovalCode' value.
        /// </summary>
        [DataMember()]
        public string CreditCardApprovalCode
        {
            get
            {
                return this._creditCardApprovalCode;
            }
            set
            {
                if ((this._creditCardApprovalCode != value))
                {
                    this.OnCreditCardApprovalCodeChanging(value);
                    this.RaiseDataMemberChanging("CreditCardApprovalCode");
                    this.ValidateProperty("CreditCardApprovalCode", value);
                    this._creditCardApprovalCode = value;
                    this.RaiseDataMemberChanged("CreditCardApprovalCode");
                    this.OnCreditCardApprovalCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerID' value.
        /// </summary>
        [DataMember()]
        public int CustomerID
        {
            get
            {
                return this._customerID;
            }
            set
            {
                if ((this._customerID != value))
                {
                    this.OnCustomerIDChanging(value);
                    this.RaiseDataMemberChanging("CustomerID");
                    this.ValidateProperty("CustomerID", value);
                    this._customerID = value;
                    this.RaiseDataMemberChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public DateTime DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Freight' value.
        /// </summary>
        [DataMember()]
        public decimal Freight
        {
            get
            {
                return this._freight;
            }
            set
            {
                if ((this._freight != value))
                {
                    this.OnFreightChanging(value);
                    this.RaiseDataMemberChanging("Freight");
                    this.ValidateProperty("Freight", value);
                    this._freight = value;
                    this.RaiseDataMemberChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ModifiedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ModifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                if ((this._modifiedDate != value))
                {
                    this.OnModifiedDateChanging(value);
                    this.RaiseDataMemberChanging("ModifiedDate");
                    this.ValidateProperty("ModifiedDate", value);
                    this._modifiedDate = value;
                    this.RaiseDataMemberChanged("ModifiedDate");
                    this.OnModifiedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OnlineOrderFlag' value.
        /// </summary>
        [DataMember()]
        public bool OnlineOrderFlag
        {
            get
            {
                return this._onlineOrderFlag;
            }
            set
            {
                if ((this._onlineOrderFlag != value))
                {
                    this.OnOnlineOrderFlagChanging(value);
                    this.RaiseDataMemberChanging("OnlineOrderFlag");
                    this.ValidateProperty("OnlineOrderFlag", value);
                    this._onlineOrderFlag = value;
                    this.RaiseDataMemberChanged("OnlineOrderFlag");
                    this.OnOnlineOrderFlagChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderDate' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'UsingRIAServices.Web.Services.DateValidator' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'ValidateDate' on type 'UsingRIAServices.Web.Services.DateValidator' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [CustomValidationAttribute(typeof(UsingRIAServices.Web.Services.DateValidator), "ValidateDate")]
        // 
        [DataMember()]
        public DateTime OrderDate
        {
            get
            {
                return this._orderDate;
            }
            set
            {
                if ((this._orderDate != value))
                {
                    this.OnOrderDateChanging(value);
                    this.RaiseDataMemberChanging("OrderDate");
                    this.ValidateProperty("OrderDate", value);
                    this._orderDate = value;
                    this.RaiseDataMemberChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseOrderNumber' value.
        /// </summary>
        [DataMember()]
        public string PurchaseOrderNumber
        {
            get
            {
                return this._purchaseOrderNumber;
            }
            set
            {
                if ((this._purchaseOrderNumber != value))
                {
                    this.OnPurchaseOrderNumberChanging(value);
                    this.RaiseDataMemberChanging("PurchaseOrderNumber");
                    this.ValidateProperty("PurchaseOrderNumber", value);
                    this._purchaseOrderNumber = value;
                    this.RaiseDataMemberChanged("PurchaseOrderNumber");
                    this.OnPurchaseOrderNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RevisionNumber' value.
        /// </summary>
        [DataMember()]
        public byte RevisionNumber
        {
            get
            {
                return this._revisionNumber;
            }
            set
            {
                if ((this._revisionNumber != value))
                {
                    this.OnRevisionNumberChanging(value);
                    this.RaiseDataMemberChanging("RevisionNumber");
                    this.ValidateProperty("RevisionNumber", value);
                    this._revisionNumber = value;
                    this.RaiseDataMemberChanged("RevisionNumber");
                    this.OnRevisionNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'rowguid' value.
        /// </summary>
        [DataMember()]
        public Guid rowguid
        {
            get
            {
                return this._rowguid;
            }
            set
            {
                if ((this._rowguid != value))
                {
                    this.OnrowguidChanging(value);
                    this.RaiseDataMemberChanging("rowguid");
                    this.ValidateProperty("rowguid", value);
                    this._rowguid = value;
                    this.RaiseDataMemberChanged("rowguid");
                    this.OnrowguidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOrderID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SalesOrderID
        {
            get
            {
                return this._salesOrderID;
            }
            set
            {
                if ((this._salesOrderID != value))
                {
                    this.OnSalesOrderIDChanging(value);
                    this.ValidateProperty("SalesOrderID", value);
                    this._salesOrderID = value;
                    this.RaisePropertyChanged("SalesOrderID");
                    this.OnSalesOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOrderNumber' value.
        /// </summary>
        [DataMember()]
        public string SalesOrderNumber
        {
            get
            {
                return this._salesOrderNumber;
            }
            set
            {
                if ((this._salesOrderNumber != value))
                {
                    this.OnSalesOrderNumberChanging(value);
                    this.RaiseDataMemberChanging("SalesOrderNumber");
                    this.ValidateProperty("SalesOrderNumber", value);
                    this._salesOrderNumber = value;
                    this.RaiseDataMemberChanged("SalesOrderNumber");
                    this.OnSalesOrderNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipDate' value.
        /// </summary>
        // Unable to generate the following attribute(s) due to the following error(s):
        // 
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references type 'UsingRIAServices.Web.Services.DateValidator' that is not accessible in the client project 'UsingRIAServices.csproj'. Are you missing an assembly reference?
        // - The attribute 'System.ComponentModel.DataAnnotations.CustomValidationAttribute' references a method 'ValidateDate' on type 'UsingRIAServices.Web.Services.DateValidator' that is not accessible in the client project 'UsingRIAServices.csproj'.
        // [CustomValidationAttribute(typeof(UsingRIAServices.Web.Services.DateValidator), "ValidateDate")]
        // 
        [DataMember()]
        public Nullable<DateTime> ShipDate
        {
            get
            {
                return this._shipDate;
            }
            set
            {
                if ((this._shipDate != value))
                {
                    this.OnShipDateChanging(value);
                    this.RaiseDataMemberChanging("ShipDate");
                    this.ValidateProperty("ShipDate", value);
                    this._shipDate = value;
                    this.RaiseDataMemberChanged("ShipDate");
                    this.OnShipDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipMethod' value.
        /// </summary>
        [DataMember()]
        public string ShipMethod
        {
            get
            {
                return this._shipMethod;
            }
            set
            {
                if ((this._shipMethod != value))
                {
                    this.OnShipMethodChanging(value);
                    this.RaiseDataMemberChanging("ShipMethod");
                    this.ValidateProperty("ShipMethod", value);
                    this._shipMethod = value;
                    this.RaiseDataMemberChanged("ShipMethod");
                    this.OnShipMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipToAddressID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ShipToAddressID
        {
            get
            {
                return this._shipToAddressID;
            }
            set
            {
                if ((this._shipToAddressID != value))
                {
                    this.OnShipToAddressIDChanging(value);
                    this.RaiseDataMemberChanging("ShipToAddressID");
                    this.ValidateProperty("ShipToAddressID", value);
                    this._shipToAddressID = value;
                    this.RaiseDataMemberChanged("ShipToAddressID");
                    this.OnShipToAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public byte Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SubTotal' value.
        /// </summary>
        [DataMember()]
        public decimal SubTotal
        {
            get
            {
                return this._subTotal;
            }
            set
            {
                if ((this._subTotal != value))
                {
                    this.OnSubTotalChanging(value);
                    this.RaiseDataMemberChanging("SubTotal");
                    this.ValidateProperty("SubTotal", value);
                    this._subTotal = value;
                    this.RaiseDataMemberChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxAmt' value.
        /// </summary>
        [DataMember()]
        public decimal TaxAmt
        {
            get
            {
                return this._taxAmt;
            }
            set
            {
                if ((this._taxAmt != value))
                {
                    this.OnTaxAmtChanging(value);
                    this.RaiseDataMemberChanging("TaxAmt");
                    this.ValidateProperty("TaxAmt", value);
                    this._taxAmt = value;
                    this.RaiseDataMemberChanged("TaxAmt");
                    this.OnTaxAmtChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalDue' value.
        /// </summary>
        [DataMember()]
        public decimal TotalDue
        {
            get
            {
                return this._totalDue;
            }
            set
            {
                if ((this._totalDue != value))
                {
                    this.OnTotalDueChanging(value);
                    this.RaiseDataMemberChanging("TotalDue");
                    this.ValidateProperty("TotalDue", value);
                    this._totalDue = value;
                    this.RaiseDataMemberChanged("TotalDue");
                    this.OnTotalDueChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._salesOrderID;
        }
    }
}
namespace UsingRIAServices.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using UsingRIAServices.Web.Models;
    
    
    /// <summary>
    /// The domain context corresponding to the 'AdventureWorksLTDomainService' domain service.
    /// </summary>
    public sealed partial class AdventureWorksLTDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class.
        /// </summary>
        public AdventureWorksLTDomainContext() : 
                this(new WebDomainClient<IAdventureWorksLTDomainServiceContract>(new Uri("UsingRIAServices-Web-Services-AdventureWorksLTDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AdventureWorksLTDomainService service URI.</param>
        public AdventureWorksLTDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAdventureWorksLTDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public AdventureWorksLTDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entities that have been loaded into this <see cref="AdventureWorksLTDomainContext"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesOrderHeader"/> entities that have been loaded into this <see cref="AdventureWorksLTDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesOrderHeader> SalesOrderHeaders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesOrderHeader>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entities using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entities.</returns>
        public EntityQuery<Customer> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<Customer>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesOrderHeader"/> entities using the 'GetOrdersByCustomerID' query.
        /// </summary>
        /// <param name="customerID">The value for the 'customerID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesOrderHeader"/> entities.</returns>
        public EntityQuery<SalesOrderHeader> GetOrdersByCustomerIDQuery(int customerID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerID", customerID);
            this.ValidateMethod("GetOrdersByCustomerIDQuery", parameters);
            return base.CreateQuery<SalesOrderHeader>("GetOrdersByCustomerID", parameters, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AdventureWorksLTDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AdventureWorksLTDomainService' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IAdventureWorksLTDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdventureWorksLTDomainService/GetCustomersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdventureWorksLTDomainService/GetCustomers", ReplyAction="http://tempuri.org/AdventureWorksLTDomainService/GetCustomersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<Customer> EndGetCustomers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOrdersByCustomerID' operation.
            /// </summary>
            /// <param name="customerID">The value for the 'customerID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerIDDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerID", ReplyAction="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetOrdersByCustomerID(int customerID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOrdersByCustomerID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOrdersByCustomerID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOrdersByCustomerID' operation.</returns>
            QueryResult<SalesOrderHeader> EndGetOrdersByCustomerID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AdventureWorksLTDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AdventureWorksLTDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AdventureWorksLTDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AdventureWorksLTDomainContextEntityContainer : EntityContainer
        {
            
            public AdventureWorksLTDomainContextEntityContainer()
            {
                this.CreateEntitySet<Customer>(EntitySetOperations.None);
                this.CreateEntitySet<SalesOrderHeader>(EntitySetOperations.Edit);
            }
        }
    }
}
