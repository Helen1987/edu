' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.ServiceModel.DomainServices
Imports System.ServiceModel.DomainServices.Client
Imports System.ServiceModel.DomainServices.Client.ApplicationServices
Imports System.ServiceModel.Web
Imports System.Xml.Serialization
Imports UsingRIAServices
Imports UsingRIAServices.Web


'''<summary>
'''The domain context corresponding to the 'AdventureWorksLTDomainService' domain service.
'''</summary>
Partial Public NotInheritable Class AdventureWorksLTDomainContext
    Inherits DomainContext
    
    #Region "Extensibility Method Definitions"

    '''<summary>
    '''This method is invoked from the constructor once initialization is complete and
    '''can be used for further object setup.
    '''</summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
    
    
    '''<summary>
    '''Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class.
    '''</summary>
    Public Sub New()
        Me.New(New WebDomainClient(Of IAdventureWorksLTDomainServiceContract)(New Uri("UsingRIAServices-AdventureWorksLTDomainService.svc", UriKind.Relative)))
    End Sub
    
    '''<summary>
    '''Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class with the specified service URI.
    '''</summary>
    '''<param name="serviceUri">The AdventureWorksLTDomainService service URI.</param>
    Public Sub New(ByVal serviceUri As Uri)
        Me.New(New WebDomainClient(Of IAdventureWorksLTDomainServiceContract)(serviceUri))
    End Sub
    
    '''<summary>
    '''Initializes a new instance of the <see cref="AdventureWorksLTDomainContext"/> class with the specified <paramref name="domainClient"/>.
    '''</summary>
    '''<param name="domainClient">The DomainClient instance to use for this domain context.</param>
    Public Sub New(ByVal domainClient As DomainClient)
        MyBase.New(domainClient)
        Me.OnCreated
    End Sub
    
    '''<summary>
    '''Gets the set of <see cref="Customer"/> entities that have been loaded into this <see cref="AdventureWorksLTDomainContext"/> instance.
    '''</summary>
    Public ReadOnly Property Customers() As EntitySet(Of Customer)
        Get
            Return MyBase.EntityContainer.GetEntitySet(Of Customer)
        End Get
    End Property
    
    '''<summary>
    '''Gets the set of <see cref="SalesOrderHeader"/> entities that have been loaded into this <see cref="AdventureWorksLTDomainContext"/> instance.
    '''</summary>
    Public ReadOnly Property SalesOrderHeaders() As EntitySet(Of SalesOrderHeader)
        Get
            Return MyBase.EntityContainer.GetEntitySet(Of SalesOrderHeader)
        End Get
    End Property
    
    '''<summary>
    '''Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entities using the 'GetCustomers' query.
    '''</summary>
    '''<returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entities.</returns>
    Public Function GetCustomersQuery() As EntityQuery(Of Customer)
        Me.ValidateMethod("GetCustomersQuery", Nothing)
        Return MyBase.CreateQuery(Of Customer)("GetCustomers", Nothing, false, true)
    End Function
    
    '''<summary>
    '''Gets an EntityQuery instance that can be used to load <see cref="SalesOrderHeader"/> entities using the 'GetOrdersByCustomerID' query.
    '''</summary>
    '''<param name="customerID">The value for the 'customerID' parameter of the query.</param>
    '''<returns>An EntityQuery that can be loaded to retrieve <see cref="SalesOrderHeader"/> entities.</returns>
    Public Function GetOrdersByCustomerIDQuery(ByVal customerID As Integer) As EntityQuery(Of SalesOrderHeader)
        Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
        parameters.Add("customerID", customerID)
        Me.ValidateMethod("GetOrdersByCustomerIDQuery", parameters)
        Return MyBase.CreateQuery(Of SalesOrderHeader)("GetOrdersByCustomerID", parameters, false, true)
    End Function
    
    '''<summary>
    '''Creates a new entity container for this domain context's entity sets.
    '''</summary>
    '''<returns>A new container instance.</returns>
    Protected Overrides Function CreateEntityContainer() As EntityContainer
        Return New AdventureWorksLTDomainContextEntityContainer()
    End Function
    
    '''<summary>
    '''Service contract for the 'AdventureWorksLTDomainService' domain service.
    '''</summary>
    <ServiceContract()>  _
    Public Interface IAdventureWorksLTDomainServiceContract
        
        '''<summary>
        '''Asynchronously invokes the 'GetCustomers' operation.
        '''</summary>
        '''<param name="callback">Callback to invoke on completion.</param>
        '''<param name="asyncState">Optional state object.</param>
        '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
        <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AdventureWorksLTDomainService/GetCustomersDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
         OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AdventureWorksLTDomainService/GetCustomers", ReplyAction:="http://tempuri.org/AdventureWorksLTDomainService/GetCustomersResponse"),  _
         WebGet()>  _
        Function BeginGetCustomers(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
        
        '''<summary>
        '''Completes the asynchronous operation begun by 'BeginGetCustomers'.
        '''</summary>
        '''<param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
        '''<returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
        Function EndGetCustomers(ByVal result As IAsyncResult) As QueryResult(Of Customer)
        
        '''<summary>
        '''Asynchronously invokes the 'GetOrdersByCustomerID' operation.
        '''</summary>
        '''<param name="customerID">The value for the 'customerID' parameter of this action.</param>
        '''<param name="callback">Callback to invoke on completion.</param>
        '''<param name="asyncState">Optional state object.</param>
        '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
        <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerIDDomainServi"& _ 
            "ceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
         OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerID", ReplyAction:="http://tempuri.org/AdventureWorksLTDomainService/GetOrdersByCustomerIDResponse"),  _
         WebGet()>  _
        Function BeginGetOrdersByCustomerID(ByVal customerID As Integer, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
        
        '''<summary>
        '''Completes the asynchronous operation begun by 'BeginGetOrdersByCustomerID'.
        '''</summary>
        '''<param name="result">The IAsyncResult returned from 'BeginGetOrdersByCustomerID'.</param>
        '''<returns>The 'QueryResult' returned from the 'GetOrdersByCustomerID' operation.</returns>
        Function EndGetOrdersByCustomerID(ByVal result As IAsyncResult) As QueryResult(Of SalesOrderHeader)
        
        '''<summary>
        '''Asynchronously invokes the 'SubmitChanges' operation.
        '''</summary>
        '''<param name="changeSet">The change-set to submit.</param>
        '''<param name="callback">Callback to invoke on completion.</param>
        '''<param name="asyncState">Optional state object.</param>
        '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
        <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AdventureWorksLTDomainService/SubmitChangesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
         OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AdventureWorksLTDomainService/SubmitChanges", ReplyAction:="http://tempuri.org/AdventureWorksLTDomainService/SubmitChangesResponse")>  _
        Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
        
        '''<summary>
        '''Completes the asynchronous operation begun by 'BeginSubmitChanges'.
        '''</summary>
        '''<param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
        '''<returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
        Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
    End Interface
    
    Friend NotInheritable Class AdventureWorksLTDomainContextEntityContainer
        Inherits EntityContainer
        
        Public Sub New()
            MyBase.New
            Me.CreateEntitySet(Of Customer)(EntitySetOperations.None)
            Me.CreateEntitySet(Of SalesOrderHeader)(EntitySetOperations.All)
        End Sub
    End Class
End Class

'''<summary>
'''The 'Customer' entity class.
'''</summary>
<DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/UsingRIAServices")>  _
Partial Public NotInheritable Class Customer
    Inherits Entity
    
    Private _companyName As String
    
    Private _customerID As Integer
    
    Private _emailAddress As String
    
    Private _firstName As String
    
    Private _lastName As String
    
    Private _middleName As String
    
    Private _modifiedDate As DateTime
    
    Private _nameStyle As Boolean
    
    Private _passwordHash As String
    
    Private _passwordSalt As String
    
    Private _phone As String
    
    Private _rowguid As Guid
    
    Private _salesOrderHeaders As EntityCollection(Of SalesOrderHeader)
    
    Private _salesPerson As String
    
    Private _suffix As String
    
    Private _title As String
    
    #Region "Extensibility Method Definitions"

    '''<summary>
    '''This method is invoked from the constructor once initialization is complete and
    '''can be used for further object setup.
    '''</summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnCompanyNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCompanyNameChanged()
        End Sub
        Private Partial Sub OnCustomerIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnCustomerIDChanged()
        End Sub
        Private Partial Sub OnEmailAddressChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnEmailAddressChanged()
        End Sub
        Private Partial Sub OnFirstNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnFirstNameChanged()
        End Sub
        Private Partial Sub OnLastNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnLastNameChanged()
        End Sub
        Private Partial Sub OnMiddleNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnMiddleNameChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnNameStyleChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnNameStyleChanged()
        End Sub
        Private Partial Sub OnPasswordHashChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnPasswordHashChanged()
        End Sub
        Private Partial Sub OnPasswordSaltChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnPasswordSaltChanged()
        End Sub
        Private Partial Sub OnPhoneChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnPhoneChanged()
        End Sub
        Private Partial Sub OnrowguidChanging(ByVal value As Guid)
        End Sub
        Private Partial Sub OnrowguidChanged()
        End Sub
        Private Partial Sub OnSalesPersonChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSalesPersonChanged()
        End Sub
        Private Partial Sub OnSuffixChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSuffixChanged()
        End Sub
        Private Partial Sub OnTitleChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTitleChanged()
        End Sub

        #End Region
    
    
    '''<summary>
    '''Initializes a new instance of the <see cref="Customer"/> class.
    '''</summary>
    Public Sub New()
        MyBase.New
        Me.OnCreated
    End Sub
    
    '''<summary>
    '''Gets or sets the 'CompanyName' value.
    '''</summary>
    <DataMember(),  _
     StringLength(128)>  _
    Public Property CompanyName() As String
        Get
            Return Me._companyName
        End Get
        Set
            If (String.Equals(Me._companyName, value) = false) Then
                Me.OnCompanyNameChanging(value)
                Me.RaiseDataMemberChanging("CompanyName")
                Me.ValidateProperty("CompanyName", value)
                Me._companyName = value
                Me.RaiseDataMemberChanged("CompanyName")
                Me.OnCompanyNameChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'CustomerID' value.
    '''</summary>
    <DataMember(),  _
     Editable(false, AllowInitialValue:=true),  _
     Key(),  _
     RoundtripOriginal()>  _
    Public Property CustomerID() As Integer
        Get
            Return Me._customerID
        End Get
        Set
            If ((Me._customerID = value)  _
                        = false) Then
                Me.OnCustomerIDChanging(value)
                Me.ValidateProperty("CustomerID", value)
                Me._customerID = value
                Me.RaisePropertyChanged("CustomerID")
                Me.OnCustomerIDChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'EmailAddress' value.
    '''</summary>
    <DataMember(),  _
     StringLength(50)>  _
    Public Property EmailAddress() As String
        Get
            Return Me._emailAddress
        End Get
        Set
            If (String.Equals(Me._emailAddress, value) = false) Then
                Me.OnEmailAddressChanging(value)
                Me.RaiseDataMemberChanging("EmailAddress")
                Me.ValidateProperty("EmailAddress", value)
                Me._emailAddress = value
                Me.RaiseDataMemberChanged("EmailAddress")
                Me.OnEmailAddressChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'FirstName' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(50)>  _
    Public Property FirstName() As String
        Get
            Return Me._firstName
        End Get
        Set
            If (String.Equals(Me._firstName, value) = false) Then
                Me.OnFirstNameChanging(value)
                Me.RaiseDataMemberChanging("FirstName")
                Me.ValidateProperty("FirstName", value)
                Me._firstName = value
                Me.RaiseDataMemberChanged("FirstName")
                Me.OnFirstNameChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'LastName' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(50)>  _
    Public Property LastName() As String
        Get
            Return Me._lastName
        End Get
        Set
            If (String.Equals(Me._lastName, value) = false) Then
                Me.OnLastNameChanging(value)
                Me.RaiseDataMemberChanging("LastName")
                Me.ValidateProperty("LastName", value)
                Me._lastName = value
                Me.RaiseDataMemberChanged("LastName")
                Me.OnLastNameChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'MiddleName' value.
    '''</summary>
    <DataMember(),  _
     StringLength(50)>  _
    Public Property MiddleName() As String
        Get
            Return Me._middleName
        End Get
        Set
            If (String.Equals(Me._middleName, value) = false) Then
                Me.OnMiddleNameChanging(value)
                Me.RaiseDataMemberChanging("MiddleName")
                Me.ValidateProperty("MiddleName", value)
                Me._middleName = value
                Me.RaiseDataMemberChanged("MiddleName")
                Me.OnMiddleNameChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'ModifiedDate' value.
    '''</summary>
    <DataMember()>  _
    Public Property ModifiedDate() As DateTime
        Get
            Return Me._modifiedDate
        End Get
        Set
            If ((Me._modifiedDate = value)  _
                        = false) Then
                Me.OnModifiedDateChanging(value)
                Me.RaiseDataMemberChanging("ModifiedDate")
                Me.ValidateProperty("ModifiedDate", value)
                Me._modifiedDate = value
                Me.RaiseDataMemberChanged("ModifiedDate")
                Me.OnModifiedDateChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'NameStyle' value.
    '''</summary>
    <DataMember()>  _
    Public Property NameStyle() As Boolean
        Get
            Return Me._nameStyle
        End Get
        Set
            If ((Me._nameStyle = value)  _
                        = false) Then
                Me.OnNameStyleChanging(value)
                Me.RaiseDataMemberChanging("NameStyle")
                Me.ValidateProperty("NameStyle", value)
                Me._nameStyle = value
                Me.RaiseDataMemberChanged("NameStyle")
                Me.OnNameStyleChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'PasswordHash' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(128)>  _
    Public Property PasswordHash() As String
        Get
            Return Me._passwordHash
        End Get
        Set
            If (String.Equals(Me._passwordHash, value) = false) Then
                Me.OnPasswordHashChanging(value)
                Me.RaiseDataMemberChanging("PasswordHash")
                Me.ValidateProperty("PasswordHash", value)
                Me._passwordHash = value
                Me.RaiseDataMemberChanged("PasswordHash")
                Me.OnPasswordHashChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'PasswordSalt' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(10)>  _
    Public Property PasswordSalt() As String
        Get
            Return Me._passwordSalt
        End Get
        Set
            If (String.Equals(Me._passwordSalt, value) = false) Then
                Me.OnPasswordSaltChanging(value)
                Me.RaiseDataMemberChanging("PasswordSalt")
                Me.ValidateProperty("PasswordSalt", value)
                Me._passwordSalt = value
                Me.RaiseDataMemberChanged("PasswordSalt")
                Me.OnPasswordSaltChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Phone' value.
    '''</summary>
    <DataMember(),  _
     StringLength(25)>  _
    Public Property Phone() As String
        Get
            Return Me._phone
        End Get
        Set
            If (String.Equals(Me._phone, value) = false) Then
                Me.OnPhoneChanging(value)
                Me.RaiseDataMemberChanging("Phone")
                Me.ValidateProperty("Phone", value)
                Me._phone = value
                Me.RaiseDataMemberChanged("Phone")
                Me.OnPhoneChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'rowguid' value.
    '''</summary>
    <DataMember()>  _
    Public Property rowguid() As Guid
        Get
            Return Me._rowguid
        End Get
        Set
            If ((Me._rowguid = value)  _
                        = false) Then
                Me.OnrowguidChanging(value)
                Me.RaiseDataMemberChanging("rowguid")
                Me.ValidateProperty("rowguid", value)
                Me._rowguid = value
                Me.RaiseDataMemberChanged("rowguid")
                Me.OnrowguidChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets the collection of associated <see cref="SalesOrderHeader"/> entities.
    '''</summary>
    <Association("Customer_SalesOrderHeader", "CustomerID", "CustomerID"),  _
     XmlIgnore()>  _
    Public ReadOnly Property SalesOrderHeaders() As EntityCollection(Of SalesOrderHeader)
        Get
            If (Me._salesOrderHeaders Is Nothing) Then
                Me._salesOrderHeaders = New EntityCollection(Of SalesOrderHeader)(Me, "SalesOrderHeaders", AddressOf Me.FilterSalesOrderHeaders, AddressOf Me.AttachSalesOrderHeaders, AddressOf Me.DetachSalesOrderHeaders)
            End If
            Return Me._salesOrderHeaders
        End Get
    End Property
    
    '''<summary>
    '''Gets or sets the 'SalesPerson' value.
    '''</summary>
    <DataMember(),  _
     StringLength(256)>  _
    Public Property SalesPerson() As String
        Get
            Return Me._salesPerson
        End Get
        Set
            If (String.Equals(Me._salesPerson, value) = false) Then
                Me.OnSalesPersonChanging(value)
                Me.RaiseDataMemberChanging("SalesPerson")
                Me.ValidateProperty("SalesPerson", value)
                Me._salesPerson = value
                Me.RaiseDataMemberChanged("SalesPerson")
                Me.OnSalesPersonChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Suffix' value.
    '''</summary>
    <DataMember(),  _
     StringLength(10)>  _
    Public Property Suffix() As String
        Get
            Return Me._suffix
        End Get
        Set
            If (String.Equals(Me._suffix, value) = false) Then
                Me.OnSuffixChanging(value)
                Me.RaiseDataMemberChanging("Suffix")
                Me.ValidateProperty("Suffix", value)
                Me._suffix = value
                Me.RaiseDataMemberChanged("Suffix")
                Me.OnSuffixChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Title' value.
    '''</summary>
    <DataMember(),  _
     StringLength(8)>  _
    Public Property Title() As String
        Get
            Return Me._title
        End Get
        Set
            If (String.Equals(Me._title, value) = false) Then
                Me.OnTitleChanging(value)
                Me.RaiseDataMemberChanging("Title")
                Me.ValidateProperty("Title", value)
                Me._title = value
                Me.RaiseDataMemberChanged("Title")
                Me.OnTitleChanged
            End If
        End Set
    End Property
    
    Private Sub AttachSalesOrderHeaders(ByVal entity As SalesOrderHeader)
        entity.Customer = Me
    End Sub
    
    Private Sub DetachSalesOrderHeaders(ByVal entity As SalesOrderHeader)
        entity.Customer = Nothing
    End Sub
    
    Private Function FilterSalesOrderHeaders(ByVal entity As SalesOrderHeader) As Boolean
        Return Object.Equals(entity.CustomerID, Me.CustomerID)
    End Function
    
    '''<summary>
    '''Computes a value from the key fields that uniquely identifies this entity instance.
    '''</summary>
    '''<returns>An object instance that uniquely identifies this entity instance.</returns>
    Public Overrides Function GetIdentity() As Object
        Return Me._customerID
    End Function
End Class

'''<summary>
'''The 'SalesOrderHeader' entity class.
'''</summary>
<DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/UsingRIAServices")>  _
Partial Public NotInheritable Class SalesOrderHeader
    Inherits Entity
    
    Private _accountNumber As String
    
    Private _billToAddressID As Nullable(Of Integer)
    
    Private _comment As String
    
    Private _creditCardApprovalCode As String
    
    Private _customer As EntityRef(Of Customer)
    
    Private _customerID As Integer
    
    Private _dueDate As DateTime
    
    Private _freight As Decimal
    
    Private _modifiedDate As DateTime
    
    Private _onlineOrderFlag As Boolean
    
    Private _orderDate As DateTime
    
    Private _purchaseOrderNumber As String
    
    Private _revisionNumber As Byte
    
    Private _rowguid As Guid
    
    Private _salesOrderID As Integer
    
    Private _salesOrderNumber As String
    
    Private _shipDate As Nullable(Of DateTime)
    
    Private _shipMethod As String
    
    Private _shipToAddressID As Nullable(Of Integer)
    
    Private _status As Byte
    
    Private _subTotal As Decimal
    
    Private _taxAmt As Decimal
    
    Private _totalDue As Decimal
    
    #Region "Extensibility Method Definitions"

    '''<summary>
    '''This method is invoked from the constructor once initialization is complete and
    '''can be used for further object setup.
    '''</summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnAccountNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnAccountNumberChanged()
        End Sub
        Private Partial Sub OnBillToAddressIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnBillToAddressIDChanged()
        End Sub
        Private Partial Sub OnCommentChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCommentChanged()
        End Sub
        Private Partial Sub OnCreditCardApprovalCodeChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCreditCardApprovalCodeChanged()
        End Sub
        Private Partial Sub OnCustomerIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnCustomerIDChanged()
        End Sub
        Private Partial Sub OnDueDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnDueDateChanged()
        End Sub
        Private Partial Sub OnFreightChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnFreightChanged()
        End Sub
        Private Partial Sub OnModifiedDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnModifiedDateChanged()
        End Sub
        Private Partial Sub OnOnlineOrderFlagChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnOnlineOrderFlagChanged()
        End Sub
        Private Partial Sub OnOrderDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnOrderDateChanged()
        End Sub
        Private Partial Sub OnPurchaseOrderNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnPurchaseOrderNumberChanged()
        End Sub
        Private Partial Sub OnRevisionNumberChanging(ByVal value As Byte)
        End Sub
        Private Partial Sub OnRevisionNumberChanged()
        End Sub
        Private Partial Sub OnrowguidChanging(ByVal value As Guid)
        End Sub
        Private Partial Sub OnrowguidChanged()
        End Sub
        Private Partial Sub OnSalesOrderIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSalesOrderIDChanged()
        End Sub
        Private Partial Sub OnSalesOrderNumberChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSalesOrderNumberChanged()
        End Sub
        Private Partial Sub OnShipDateChanging(ByVal value As Nullable(Of DateTime))
        End Sub
        Private Partial Sub OnShipDateChanged()
        End Sub
        Private Partial Sub OnShipMethodChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnShipMethodChanged()
        End Sub
        Private Partial Sub OnShipToAddressIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnShipToAddressIDChanged()
        End Sub
        Private Partial Sub OnStatusChanging(ByVal value As Byte)
        End Sub
        Private Partial Sub OnStatusChanged()
        End Sub
        Private Partial Sub OnSubTotalChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnSubTotalChanged()
        End Sub
        Private Partial Sub OnTaxAmtChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnTaxAmtChanged()
        End Sub
        Private Partial Sub OnTotalDueChanging(ByVal value As Decimal)
        End Sub
        Private Partial Sub OnTotalDueChanged()
        End Sub

        #End Region
    
    
    '''<summary>
    '''Initializes a new instance of the <see cref="SalesOrderHeader"/> class.
    '''</summary>
    Public Sub New()
        MyBase.New
        Me.OnCreated
    End Sub
    
    '''<summary>
    '''Gets or sets the 'AccountNumber' value.
    '''</summary>
    <DataMember(),  _
     StringLength(15)>  _
    Public Property AccountNumber() As String
        Get
            Return Me._accountNumber
        End Get
        Set
            If (String.Equals(Me._accountNumber, value) = false) Then
                Me.OnAccountNumberChanging(value)
                Me.RaiseDataMemberChanging("AccountNumber")
                Me.ValidateProperty("AccountNumber", value)
                Me._accountNumber = value
                Me.RaiseDataMemberChanged("AccountNumber")
                Me.OnAccountNumberChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'BillToAddressID' value.
    '''</summary>
    <DataMember()>  _
    Public Property BillToAddressID() As Nullable(Of Integer)
        Get
            Return Me._billToAddressID
        End Get
        Set
            If (Me._billToAddressID.Equals(value) = false) Then
                Me.OnBillToAddressIDChanging(value)
                Me.RaiseDataMemberChanging("BillToAddressID")
                Me.ValidateProperty("BillToAddressID", value)
                Me._billToAddressID = value
                Me.RaiseDataMemberChanged("BillToAddressID")
                Me.OnBillToAddressIDChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Comment' value.
    '''</summary>
    <DataMember(),  _
     Required()>  _
    Public Property Comment() As String
        Get
            Return Me._comment
        End Get
        Set
            If (String.Equals(Me._comment, value) = false) Then
                Me.OnCommentChanging(value)
                Me.RaiseDataMemberChanging("Comment")
                Me.ValidateProperty("Comment", value)
                Me._comment = value
                Me.RaiseDataMemberChanged("Comment")
                Me.OnCommentChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'CreditCardApprovalCode' value.
    '''</summary>
    <DataMember(),  _
     StringLength(15)>  _
    Public Property CreditCardApprovalCode() As String
        Get
            Return Me._creditCardApprovalCode
        End Get
        Set
            If (String.Equals(Me._creditCardApprovalCode, value) = false) Then
                Me.OnCreditCardApprovalCodeChanging(value)
                Me.RaiseDataMemberChanging("CreditCardApprovalCode")
                Me.ValidateProperty("CreditCardApprovalCode", value)
                Me._creditCardApprovalCode = value
                Me.RaiseDataMemberChanged("CreditCardApprovalCode")
                Me.OnCreditCardApprovalCodeChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the associated <see cref="Customer"/> entity.
    '''</summary>
    <Association("Customer_SalesOrderHeader", "CustomerID", "CustomerID", IsForeignKey:=true),  _
     XmlIgnore()>  _
    Public Property Customer() As Customer
        Get
            If (Me._customer Is Nothing) Then
                Me._customer = New EntityRef(Of Customer)(Me, "Customer", AddressOf Me.FilterCustomer)
            End If
            Return Me._customer.Entity
        End Get
        Set
            Dim previous As Customer = Me.Customer
            If (Object.Equals(previous, value) = false) Then
                Me.ValidateProperty("Customer", value)
                If (Not (previous) Is Nothing) Then
                    Me._customer.Entity = Nothing
                    previous.SalesOrderHeaders.Remove(Me)
                End If
                If (Not (value) Is Nothing) Then
                    Me.CustomerID = value.CustomerID
                Else
                    Me.CustomerID = CType(Nothing, Integer)
                End If
                Me._customer.Entity = value
                If (Not (value) Is Nothing) Then
                    value.SalesOrderHeaders.Add(Me)
                End If
                Me.RaisePropertyChanged("Customer")
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'CustomerID' value.
    '''</summary>
    <DataMember(),  _
     RoundtripOriginal()>  _
    Public Property CustomerID() As Integer
        Get
            Return Me._customerID
        End Get
        Set
            If ((Me._customerID = value)  _
                        = false) Then
                Me.OnCustomerIDChanging(value)
                Me.RaiseDataMemberChanging("CustomerID")
                Me.ValidateProperty("CustomerID", value)
                Me._customerID = value
                Me.RaiseDataMemberChanged("CustomerID")
                Me.OnCustomerIDChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'DueDate' value.
    '''</summary>
    <DataMember()>  _
    Public Property DueDate() As DateTime
        Get
            Return Me._dueDate
        End Get
        Set
            If ((Me._dueDate = value)  _
                        = false) Then
                Me.OnDueDateChanging(value)
                Me.RaiseDataMemberChanging("DueDate")
                Me.ValidateProperty("DueDate", value)
                Me._dueDate = value
                Me.RaiseDataMemberChanged("DueDate")
                Me.OnDueDateChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Freight' value.
    '''</summary>
    <DataMember()>  _
    Public Property Freight() As Decimal
        Get
            Return Me._freight
        End Get
        Set
            If ((Me._freight = value)  _
                        = false) Then
                Me.OnFreightChanging(value)
                Me.RaiseDataMemberChanging("Freight")
                Me.ValidateProperty("Freight", value)
                Me._freight = value
                Me.RaiseDataMemberChanged("Freight")
                Me.OnFreightChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'ModifiedDate' value.
    '''</summary>
    <DataMember()>  _
    Public Property ModifiedDate() As DateTime
        Get
            Return Me._modifiedDate
        End Get
        Set
            If ((Me._modifiedDate = value)  _
                        = false) Then
                Me.OnModifiedDateChanging(value)
                Me.RaiseDataMemberChanging("ModifiedDate")
                Me.ValidateProperty("ModifiedDate", value)
                Me._modifiedDate = value
                Me.RaiseDataMemberChanged("ModifiedDate")
                Me.OnModifiedDateChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'OnlineOrderFlag' value.
    '''</summary>
    <DataMember()>  _
    Public Property OnlineOrderFlag() As Boolean
        Get
            Return Me._onlineOrderFlag
        End Get
        Set
            If ((Me._onlineOrderFlag = value)  _
                        = false) Then
                Me.OnOnlineOrderFlagChanging(value)
                Me.RaiseDataMemberChanging("OnlineOrderFlag")
                Me.ValidateProperty("OnlineOrderFlag", value)
                Me._onlineOrderFlag = value
                Me.RaiseDataMemberChanged("OnlineOrderFlag")
                Me.OnOnlineOrderFlagChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'OrderDate' value.
    '''</summary>
    <CustomValidation(GetType(DateValidator), "ValidateDate"),  _
     DataMember()>  _
    Public Property OrderDate() As DateTime
        Get
            Return Me._orderDate
        End Get
        Set
            If ((Me._orderDate = value)  _
                        = false) Then
                Me.OnOrderDateChanging(value)
                Me.RaiseDataMemberChanging("OrderDate")
                Me.ValidateProperty("OrderDate", value)
                Me._orderDate = value
                Me.RaiseDataMemberChanged("OrderDate")
                Me.OnOrderDateChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'PurchaseOrderNumber' value.
    '''</summary>
    <DataMember(),  _
     StringLength(25)>  _
    Public Property PurchaseOrderNumber() As String
        Get
            Return Me._purchaseOrderNumber
        End Get
        Set
            If (String.Equals(Me._purchaseOrderNumber, value) = false) Then
                Me.OnPurchaseOrderNumberChanging(value)
                Me.RaiseDataMemberChanging("PurchaseOrderNumber")
                Me.ValidateProperty("PurchaseOrderNumber", value)
                Me._purchaseOrderNumber = value
                Me.RaiseDataMemberChanged("PurchaseOrderNumber")
                Me.OnPurchaseOrderNumberChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'RevisionNumber' value.
    '''</summary>
    <DataMember()>  _
    Public Property RevisionNumber() As Byte
        Get
            Return Me._revisionNumber
        End Get
        Set
            If ((Me._revisionNumber = value)  _
                        = false) Then
                Me.OnRevisionNumberChanging(value)
                Me.RaiseDataMemberChanging("RevisionNumber")
                Me.ValidateProperty("RevisionNumber", value)
                Me._revisionNumber = value
                Me.RaiseDataMemberChanged("RevisionNumber")
                Me.OnRevisionNumberChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'rowguid' value.
    '''</summary>
    <DataMember()>  _
    Public Property rowguid() As Guid
        Get
            Return Me._rowguid
        End Get
        Set
            If ((Me._rowguid = value)  _
                        = false) Then
                Me.OnrowguidChanging(value)
                Me.RaiseDataMemberChanging("rowguid")
                Me.ValidateProperty("rowguid", value)
                Me._rowguid = value
                Me.RaiseDataMemberChanged("rowguid")
                Me.OnrowguidChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'SalesOrderID' value.
    '''</summary>
    <DataMember(),  _
     Editable(false, AllowInitialValue:=true),  _
     Key(),  _
     RoundtripOriginal()>  _
    Public Property SalesOrderID() As Integer
        Get
            Return Me._salesOrderID
        End Get
        Set
            If ((Me._salesOrderID = value)  _
                        = false) Then
                Me.OnSalesOrderIDChanging(value)
                Me.ValidateProperty("SalesOrderID", value)
                Me._salesOrderID = value
                Me.RaisePropertyChanged("SalesOrderID")
                Me.OnSalesOrderIDChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'SalesOrderNumber' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(25)>  _
    Public Property SalesOrderNumber() As String
        Get
            Return Me._salesOrderNumber
        End Get
        Set
            If (String.Equals(Me._salesOrderNumber, value) = false) Then
                Me.OnSalesOrderNumberChanging(value)
                Me.RaiseDataMemberChanging("SalesOrderNumber")
                Me.ValidateProperty("SalesOrderNumber", value)
                Me._salesOrderNumber = value
                Me.RaiseDataMemberChanged("SalesOrderNumber")
                Me.OnSalesOrderNumberChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'ShipDate' value.
    '''</summary>
    <DataMember()>  _
    Public Property ShipDate() As Nullable(Of DateTime)
        Get
            Return Me._shipDate
        End Get
        Set
            If (Me._shipDate.Equals(value) = false) Then
                Me.OnShipDateChanging(value)
                Me.RaiseDataMemberChanging("ShipDate")
                Me.ValidateProperty("ShipDate", value)
                Me._shipDate = value
                Me.RaiseDataMemberChanged("ShipDate")
                Me.OnShipDateChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'ShipMethod' value.
    '''</summary>
    <DataMember(),  _
     Required(),  _
     StringLength(50)>  _
    Public Property ShipMethod() As String
        Get
            Return Me._shipMethod
        End Get
        Set
            If (String.Equals(Me._shipMethod, value) = false) Then
                Me.OnShipMethodChanging(value)
                Me.RaiseDataMemberChanging("ShipMethod")
                Me.ValidateProperty("ShipMethod", value)
                Me._shipMethod = value
                Me.RaiseDataMemberChanged("ShipMethod")
                Me.OnShipMethodChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'ShipToAddressID' value.
    '''</summary>
    <DataMember()>  _
    Public Property ShipToAddressID() As Nullable(Of Integer)
        Get
            Return Me._shipToAddressID
        End Get
        Set
            If (Me._shipToAddressID.Equals(value) = false) Then
                Me.OnShipToAddressIDChanging(value)
                Me.RaiseDataMemberChanging("ShipToAddressID")
                Me.ValidateProperty("ShipToAddressID", value)
                Me._shipToAddressID = value
                Me.RaiseDataMemberChanged("ShipToAddressID")
                Me.OnShipToAddressIDChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'Status' value.
    '''</summary>
    <DataMember()>  _
    Public Property Status() As Byte
        Get
            Return Me._status
        End Get
        Set
            If ((Me._status = value)  _
                        = false) Then
                Me.OnStatusChanging(value)
                Me.RaiseDataMemberChanging("Status")
                Me.ValidateProperty("Status", value)
                Me._status = value
                Me.RaiseDataMemberChanged("Status")
                Me.OnStatusChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'SubTotal' value.
    '''</summary>
    <DataMember()>  _
    Public Property SubTotal() As Decimal
        Get
            Return Me._subTotal
        End Get
        Set
            If ((Me._subTotal = value)  _
                        = false) Then
                Me.OnSubTotalChanging(value)
                Me.RaiseDataMemberChanging("SubTotal")
                Me.ValidateProperty("SubTotal", value)
                Me._subTotal = value
                Me.RaiseDataMemberChanged("SubTotal")
                Me.OnSubTotalChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'TaxAmt' value.
    '''</summary>
    <DataMember()>  _
    Public Property TaxAmt() As Decimal
        Get
            Return Me._taxAmt
        End Get
        Set
            If ((Me._taxAmt = value)  _
                        = false) Then
                Me.OnTaxAmtChanging(value)
                Me.RaiseDataMemberChanging("TaxAmt")
                Me.ValidateProperty("TaxAmt", value)
                Me._taxAmt = value
                Me.RaiseDataMemberChanged("TaxAmt")
                Me.OnTaxAmtChanged
            End If
        End Set
    End Property
    
    '''<summary>
    '''Gets or sets the 'TotalDue' value.
    '''</summary>
    <DataMember()>  _
    Public Property TotalDue() As Decimal
        Get
            Return Me._totalDue
        End Get
        Set
            If ((Me._totalDue = value)  _
                        = false) Then
                Me.OnTotalDueChanging(value)
                Me.RaiseDataMemberChanging("TotalDue")
                Me.ValidateProperty("TotalDue", value)
                Me._totalDue = value
                Me.RaiseDataMemberChanged("TotalDue")
                Me.OnTotalDueChanged
            End If
        End Set
    End Property
    
    Private Function FilterCustomer(ByVal entity As Customer) As Boolean
        Return Object.Equals(entity.CustomerID, Me.CustomerID)
    End Function
    
    '''<summary>
    '''Computes a value from the key fields that uniquely identifies this entity instance.
    '''</summary>
    '''<returns>An object instance that uniquely identifies this entity instance.</returns>
    Public Overrides Function GetIdentity() As Object
        Return Me._salesOrderID
    End Function
End Class

'''<summary>
'''Context for the RIA application.
'''</summary>
'''<remarks>
'''This context extends the base to make application services and types available
'''for consumption from code and xaml.
'''</remarks>
Partial Public NotInheritable Class WebContext
    Inherits WebContextBase
    
    #Region "Extensibility Method Definitions"

    '''<summary>
    '''This method is invoked from the constructor once initialization is complete and
    '''can be used for further object setup.
    '''</summary>
    Private Partial Sub OnCreated()
    End Sub

    #End Region
    
    
    '''<summary>
    '''Initializes a new instance of the WebContext class.
    '''</summary>
    Public Sub New()
        MyBase.New
        Me.OnCreated
    End Sub
    
    '''<summary>
    '''Gets the context that is registered as a lifetime object with the current application.
    '''</summary>
    '''<exception cref="InvalidOperationException"> is thrown if there is no current application,
    '''no contexts have been added, or more than one context has been added.
    '''</exception>
    '''<seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
    Public Shadows Shared ReadOnly Property Current() As WebContext
        Get
            Return CType(WebContextBase.Current,WebContext)
        End Get
    End Property
    
    '''<summary>
    '''Gets a user representing the authenticated identity.
    '''</summary>
    Public Shadows ReadOnly Property User() As User
        Get
            Return CType(MyBase.User,User)
        End Get
    End Property
End Class

Namespace Web
    
    '''<summary>
    '''The domain context corresponding to the 'AuthenticationService' domain service.
    '''</summary>
    Partial Public NotInheritable Class AuthenticationContext
        Inherits Global.System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
        
        #Region "Extensibility Method Definitions"

        '''<summary>
        '''This method is invoked from the constructor once initialization is complete and
        '''can be used for further object setup.
        '''</summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        '''<summary>
        '''Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        '''</summary>
        Public Sub New()
            Me.New(New WebDomainClient(Of IAuthenticationServiceContract)(New Uri("UsingRIAServices-Web-AuthenticationService.svc", UriKind.Relative)))
        End Sub
        
        '''<summary>
        '''Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        '''</summary>
        '''<param name="serviceUri">The AuthenticationService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(New WebDomainClient(Of IAuthenticationServiceContract)(serviceUri))
        End Sub
        
        '''<summary>
        '''Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        '''</summary>
        '''<param name="domainClient">The DomainClient instance to use for this domain context.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        '''<summary>
        '''Gets the set of <see cref="User"/> entities that have been loaded into this <see cref="AuthenticationContext"/> instance.
        '''</summary>
        Public ReadOnly Property Users() As EntitySet(Of User)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of User)
            End Get
        End Property
        
        '''<summary>
        '''Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'GetUser' query.
        '''</summary>
        '''<returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        Public Function GetUserQuery() As EntityQuery(Of User)
            Me.ValidateMethod("GetUserQuery", Nothing)
            Return MyBase.CreateQuery(Of User)("GetUser", Nothing, false, false)
        End Function
        
        '''<summary>
        '''Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Login' query.
        '''</summary>
        '''<param name="userName">The value for the 'userName' parameter of the query.</param>
        '''<param name="password">The value for the 'password' parameter of the query.</param>
        '''<param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        '''<param name="customData">The value for the 'customData' parameter of the query.</param>
        '''<returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        Public Function LoginQuery(ByVal userName As String, ByVal password As String, ByVal isPersistent As Boolean, ByVal customData As String) As EntityQuery(Of User)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("userName", userName)
            parameters.Add("password", password)
            parameters.Add("isPersistent", isPersistent)
            parameters.Add("customData", customData)
            Me.ValidateMethod("LoginQuery", parameters)
            Return MyBase.CreateQuery(Of User)("Login", parameters, true, false)
        End Function
        
        '''<summary>
        '''Gets an EntityQuery instance that can be used to load <see cref="User"/> entities using the 'Logout' query.
        '''</summary>
        '''<returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entities.</returns>
        Public Function LogoutQuery() As EntityQuery(Of User)
            Me.ValidateMethod("LogoutQuery", Nothing)
            Return MyBase.CreateQuery(Of User)("Logout", Nothing, true, false)
        End Function
        
        '''<summary>
        '''Creates a new entity container for this domain context's entity sets.
        '''</summary>
        '''<returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New AuthenticationContextEntityContainer()
        End Function
        
        '''<summary>
        '''Service contract for the 'AuthenticationService' domain service.
        '''</summary>
        <ServiceContract()>  _
        Public Interface IAuthenticationServiceContract
            
            '''<summary>
            '''Asynchronously invokes the 'GetUser' operation.
            '''</summary>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AuthenticationService/GetUser", ReplyAction:="http://tempuri.org/AuthenticationService/GetUserResponse"),  _
             WebGet()>  _
            Function BeginGetUser(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginGetUser'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            '''<returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            Function EndGetUser(ByVal result As IAsyncResult) As QueryResult(Of User)
            
            '''<summary>
            '''Asynchronously invokes the 'Login' operation.
            '''</summary>
            '''<param name="userName">The value for the 'userName' parameter of this action.</param>
            '''<param name="password">The value for the 'password' parameter of this action.</param>
            '''<param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            '''<param name="customData">The value for the 'customData' parameter of this action.</param>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AuthenticationService/Login", ReplyAction:="http://tempuri.org/AuthenticationService/LoginResponse")>  _
            Function BeginLogin(ByVal userName As String, ByVal password As String, ByVal isPersistent As Boolean, ByVal customData As String, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginLogin'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            '''<returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            Function EndLogin(ByVal result As IAsyncResult) As QueryResult(Of User)
            
            '''<summary>
            '''Asynchronously invokes the 'Logout' operation.
            '''</summary>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AuthenticationService/Logout", ReplyAction:="http://tempuri.org/AuthenticationService/LogoutResponse")>  _
            Function BeginLogout(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginLogout'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            '''<returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            Function EndLogout(ByVal result As IAsyncResult) As QueryResult(Of User)
            
            '''<summary>
            '''Asynchronously invokes the 'SubmitChanges' operation.
            '''</summary>
            '''<param name="changeSet">The change-set to submit.</param>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction:="http://tempuri.org/AuthenticationService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            '''<returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class AuthenticationContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of User)(EntitySetOperations.Edit)
            End Sub
        End Class
    End Class
    
    Public Enum CreateUserStatus
        
        Success = 0
        
        InvalidUserName = 1
        
        InvalidPassword = 2
        
        InvalidQuestion = 3
        
        InvalidAnswer = 4
        
        InvalidEmail = 5
        
        DuplicateUserName = 6
        
        DuplicateEmail = 7
        
        Failure = 8
    End Enum
    
    '''<summary>
    '''The 'RegistrationData' entity class.
    '''</summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web")>  _
    Partial Public NotInheritable Class RegistrationData
        Inherits Entity
        
        Private _answer As String
        
        Private _email As String
        
        Private _friendlyName As String
        
        Private _question As String
        
        Private _userName As String
        
        #Region "Extensibility Method Definitions"

        '''<summary>
        '''This method is invoked from the constructor once initialization is complete and
        '''can be used for further object setup.
        '''</summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnAnswerChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnAnswerChanged()
        End Sub
        Private Partial Sub OnEmailChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnEmailChanged()
        End Sub
        Private Partial Sub OnFriendlyNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnFriendlyNameChanged()
        End Sub
        Private Partial Sub OnQuestionChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnQuestionChanged()
        End Sub
        Private Partial Sub OnUserNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnUserNameChanged()
        End Sub

        #End Region
        
        
        '''<summary>
        '''Initializes a new instance of the <see cref="RegistrationData"/> class.
        '''</summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        '''<summary>
        '''Gets or sets the 'Answer' value.
        '''</summary>
        <DataMember(),  _
         Display(Name:="SecurityAnswerLabel", Order:=6, ResourceType:=GetType(RegistrationDataResources)),  _
         Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources))>  _
        Public Property Answer() As String
            Get
                Return Me._answer
            End Get
            Set
                If (String.Equals(Me._answer, value) = false) Then
                    Me.OnAnswerChanging(value)
                    Me.RaiseDataMemberChanging("Answer")
                    Me.ValidateProperty("Answer", value)
                    Me._answer = value
                    Me.RaiseDataMemberChanged("Answer")
                    Me.OnAnswerChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'Email' value.
        '''</summary>
        <DataMember(),  _
         Display(Name:="EmailLabel", Order:=2, ResourceType:=GetType(RegistrationDataResources)),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RegularExpression("^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4"& _ 
            "}|[0-9]{1,3})(\]?)$", ErrorMessageResourceName:="ValidationErrorInvalidEmail", ErrorMessageResourceType:=GetType(ValidationErrorResources)),  _
         Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources)),  _
         RoundtripOriginal()>  _
        Public Property Email() As String
            Get
                Return Me._email
            End Get
            Set
                If (String.Equals(Me._email, value) = false) Then
                    Me.OnEmailChanging(value)
                    Me.ValidateProperty("Email", value)
                    Me._email = value
                    Me.RaisePropertyChanged("Email")
                    Me.OnEmailChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'FriendlyName' value.
        '''</summary>
        <DataMember(),  _
         Display(Description:="FriendlyNameDescription", Name:="FriendlyNameLabel", Order:=1, ResourceType:=GetType(RegistrationDataResources)),  _
         StringLength(255, ErrorMessageResourceName:="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType:=GetType(ValidationErrorResources))>  _
        Public Property FriendlyName() As String
            Get
                Return Me._friendlyName
            End Get
            Set
                If (String.Equals(Me._friendlyName, value) = false) Then
                    Me.OnFriendlyNameChanging(value)
                    Me.RaiseDataMemberChanging("FriendlyName")
                    Me.ValidateProperty("FriendlyName", value)
                    Me._friendlyName = value
                    Me.RaiseDataMemberChanged("FriendlyName")
                    Me.OnFriendlyNameChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'Question' value.
        '''</summary>
        <DataMember(),  _
         Display(Name:="SecurityQuestionLabel", Order:=5, ResourceType:=GetType(RegistrationDataResources)),  _
         Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources))>  _
        Public Property Question() As String
            Get
                Return Me._question
            End Get
            Set
                If (String.Equals(Me._question, value) = false) Then
                    Me.OnQuestionChanging(value)
                    Me.RaiseDataMemberChanging("Question")
                    Me.ValidateProperty("Question", value)
                    Me._question = value
                    Me.RaiseDataMemberChanged("Question")
                    Me.OnQuestionChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'UserName' value.
        '''</summary>
        <DataMember(),  _
         Display(Name:="UserNameLabel", Order:=0, ResourceType:=GetType(RegistrationDataResources)),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName:="ValidationErrorInvalidUserName", ErrorMessageResourceType:=GetType(ValidationErrorResources)),  _
         Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources)),  _
         RoundtripOriginal(),  _
         StringLength(255, ErrorMessageResourceName:="ValidationErrorBadUserNameLength", ErrorMessageResourceType:=GetType(ValidationErrorResources), MinimumLength:=4)>  _
        Public Property UserName() As String
            Get
                Return Me._userName
            End Get
            Set
                If (String.Equals(Me._userName, value) = false) Then
                    Me.OnUserNameChanging(value)
                    Me.ValidateProperty("UserName", value)
                    Me._userName = value
                    Me.RaisePropertyChanged("UserName")
                    Me.OnUserNameChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Computes a value from the key fields that uniquely identifies this entity instance.
        '''</summary>
        '''<returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            If ((Me._email Is Nothing)  _
                        OrElse (Me._userName Is Nothing)) Then
                Return Nothing
            End If
            Return EntityKey.Create(Me._email, Me._userName)
        End Function
    End Class
    
    '''<summary>
    '''The 'User' entity class.
    '''</summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/UsingRIAServices.Web")>  _
    Partial Public NotInheritable Class User
        Inherits Entity
        Implements Global.System.Security.Principal.IIdentity, Global.System.Security.Principal.IPrincipal
        
        Private _friendlyName As String
        
        Private _name As String = String.Empty
        
        Private _roles As IEnumerable(Of String)
        
        #Region "Extensibility Method Definitions"

        '''<summary>
        '''This method is invoked from the constructor once initialization is complete and
        '''can be used for further object setup.
        '''</summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnFriendlyNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnFriendlyNameChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnRolesChanging(ByVal value As IEnumerable(Of String))
        End Sub
        Private Partial Sub OnRolesChanged()
        End Sub

        #End Region
        
        
        '''<summary>
        '''Initializes a new instance of the <see cref="User"/> class.
        '''</summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        '''<summary>
        '''Gets or sets the 'FriendlyName' value.
        '''</summary>
        <DataMember()>  _
        Public Property FriendlyName() As String
            Get
                Return Me._friendlyName
            End Get
            Set
                If (String.Equals(Me._friendlyName, value) = false) Then
                    Me.OnFriendlyNameChanging(value)
                    Me.RaiseDataMemberChanging("FriendlyName")
                    Me.ValidateProperty("FriendlyName", value)
                    Me._friendlyName = value
                    Me.RaiseDataMemberChanged("FriendlyName")
                    Me.OnFriendlyNameChanged
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'Name' value.
        '''</summary>
        <DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaisePropertyChanged("Name")
                    Me.OnNameChanged
                    Me.RaisePropertyChanged("IsAuthenticated")
                End If
            End Set
        End Property
        
        '''<summary>
        '''Gets or sets the 'Roles' value.
        '''</summary>
        <DataMember(),  _
         Editable(false)>  _
        Public Property Roles() As IEnumerable(Of String)
            Get
                Return Me._roles
            End Get
            Set
                If (Object.Equals(Me._roles, value) = false) Then
                    Me.OnRolesChanging(value)
                    Me.ValidateProperty("Roles", value)
                    Me._roles = value
                    Me.RaisePropertyChanged("Roles")
                    Me.OnRolesChanged
                End If
            End Set
        End Property
        
        ReadOnly Property Global_System_Security_Principal_IIdentity_AuthenticationType() As String Implements Global.System.Security.Principal.IIdentity.AuthenticationType
            Get
                Return String.Empty
            End Get
        End Property
        
        '''<summary>
        '''Gets a value indicating whether the identity is authenticated.
        '''</summary>
        '''<remarks>
        '''This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        '''</remarks>
        Public ReadOnly Property IsAuthenticated() As Boolean Implements Global.System.Security.Principal.IIdentity.IsAuthenticated
            Get
                Return (true <> String.IsNullOrEmpty(Me.Name))
            End Get
        End Property
        
        ReadOnly Property Global_System_Security_Principal_IIdentity_Name() As String Implements Global.System.Security.Principal.IIdentity.Name
            Get
                Return Me.Name
            End Get
        End Property
        
        ReadOnly Property Global_System_Security_Principal_IPrincipal_Identity() As Global.System.Security.Principal.IIdentity Implements Global.System.Security.Principal.IPrincipal.Identity
            Get
                Return Me
            End Get
        End Property
        
        '''<summary>
        '''Computes a value from the key fields that uniquely identifies this entity instance.
        '''</summary>
        '''<returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._name
        End Function
        
        '''<summary>
        '''Return whether the principal is in the role.
        '''</summary>
        '''<remarks>
        '''Returns whether the specified role is contained in the roles.
        '''This implementation is case sensitive.
        '''</remarks>
        '''<param name="role">The name of the role for which to check membership.</param>
        '''<returns>Whether the principal is in the role.</returns>
        Public Function IsInRole(ByVal role As String) As Boolean Implements Global.System.Security.Principal.IPrincipal.IsInRole
            If (Me.Roles Is Nothing) Then
                Return false
            End If
            Return Global.System.Linq.Enumerable.Contains(Me.Roles, role)
        End Function
    End Class
    
    '''<summary>
    '''The domain context corresponding to the 'UserRegistrationService' domain service.
    '''</summary>
    Partial Public NotInheritable Class UserRegistrationContext
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        '''<summary>
        '''This method is invoked from the constructor once initialization is complete and
        '''can be used for further object setup.
        '''</summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        '''<summary>
        '''Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        '''</summary>
        Public Sub New()
            Me.New(New WebDomainClient(Of IUserRegistrationServiceContract)(New Uri("UsingRIAServices-Web-UserRegistrationService.svc", UriKind.Relative)))
        End Sub
        
        '''<summary>
        '''Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        '''</summary>
        '''<param name="serviceUri">The UserRegistrationService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(New WebDomainClient(Of IUserRegistrationServiceContract)(serviceUri))
        End Sub
        
        '''<summary>
        '''Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        '''</summary>
        '''<param name="domainClient">The DomainClient instance to use for this domain context.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        '''<summary>
        '''Gets the set of <see cref="RegistrationData"/> entities that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        '''</summary>
        Public ReadOnly Property RegistrationDatas() As EntitySet(Of RegistrationData)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of RegistrationData)
            End Get
        End Property
        
        '''<summary>
        '''Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entities using the 'GetUsers' query.
        '''</summary>
        '''<returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entities.</returns>
        Public Function GetUsersQuery() As EntityQuery(Of RegistrationData)
            Me.ValidateMethod("GetUsersQuery", Nothing)
            Return MyBase.CreateQuery(Of RegistrationData)("GetUsers", Nothing, false, true)
        End Function
        
        '''<summary>
        '''Asynchronously invokes the 'CreateUser' method of the domain service.
        '''</summary>
        '''<param name="user">The value for the 'user' parameter of this action.</param>
        '''<param name="password">The value for the 'password' parameter of this action.</param>
        '''<param name="callback">Callback to invoke when the operation completes.</param>
        '''<param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        '''<returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function CreateUser(ByVal user As RegistrationData, <RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName:="ValidationErrorBadPasswordStrength", ErrorMessageResourceType:=GetType(ValidationErrorResources)), Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources)), StringLength(50, ErrorMessageResourceName:="ValidationErrorBadPasswordLength", ErrorMessageResourceType:=GetType(ValidationErrorResources), MinimumLength:=7)> ByVal password As String, ByVal callback As Action(Of InvokeOperation(Of CreateUserStatus)), ByVal userState As Object) As InvokeOperation(Of CreateUserStatus)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("user", user)
            parameters.Add("password", password)
            Me.ValidateMethod("CreateUser", parameters)
            Return CType(Me.InvokeOperation("CreateUser", GetType(CreateUserStatus), parameters, true, callback, userState),InvokeOperation(Of CreateUserStatus))
        End Function
        
        '''<summary>
        '''Asynchronously invokes the 'CreateUser' method of the domain service.
        '''</summary>
        '''<param name="user">The value for the 'user' parameter of this action.</param>
        '''<param name="password">The value for the 'password' parameter of this action.</param>
        '''<returns>An operation instance that can be used to manage the asynchronous request.</returns>
        Public Overloads Function CreateUser(ByVal user As RegistrationData, <RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName:="ValidationErrorBadPasswordStrength", ErrorMessageResourceType:=GetType(ValidationErrorResources)), Required(ErrorMessageResourceName:="ValidationErrorRequiredField", ErrorMessageResourceType:=GetType(ValidationErrorResources)), StringLength(50, ErrorMessageResourceName:="ValidationErrorBadPasswordLength", ErrorMessageResourceType:=GetType(ValidationErrorResources), MinimumLength:=7)> ByVal password As String) As InvokeOperation(Of CreateUserStatus)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("user", user)
            parameters.Add("password", password)
            Me.ValidateMethod("CreateUser", parameters)
            Return CType(Me.InvokeOperation("CreateUser", GetType(CreateUserStatus), parameters, true, Nothing, Nothing),InvokeOperation(Of CreateUserStatus))
        End Function
        
        '''<summary>
        '''Creates a new entity container for this domain context's entity sets.
        '''</summary>
        '''<returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New UserRegistrationContextEntityContainer()
        End Function
        
        '''<summary>
        '''Service contract for the 'UserRegistrationService' domain service.
        '''</summary>
        <ServiceContract()>  _
        Public Interface IUserRegistrationServiceContract
            
            '''<summary>
            '''Asynchronously invokes the 'CreateUser' operation.
            '''</summary>
            '''<param name="user">The value for the 'user' parameter of this action.</param>
            '''<param name="password">The value for the 'password' parameter of this action.</param>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction:="http://tempuri.org/UserRegistrationService/CreateUserResponse")>  _
            Function BeginCreateUser(ByVal user As RegistrationData, ByVal password As String, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginCreateUser'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            '''<returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            Function EndCreateUser(ByVal result As IAsyncResult) As CreateUserStatus
            
            '''<summary>
            '''Asynchronously invokes the 'GetUsers' operation.
            '''</summary>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction:="http://tempuri.org/UserRegistrationService/GetUsersResponse"),  _
             WebGet()>  _
            Function BeginGetUsers(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginGetUsers'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            '''<returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            Function EndGetUsers(ByVal result As IAsyncResult) As QueryResult(Of RegistrationData)
            
            '''<summary>
            '''Asynchronously invokes the 'SubmitChanges' operation.
            '''</summary>
            '''<param name="changeSet">The change-set to submit.</param>
            '''<param name="callback">Callback to invoke on completion.</param>
            '''<param name="asyncState">Optional state object.</param>
            '''<returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction:="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            '''<summary>
            '''Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            '''</summary>
            '''<param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            '''<returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class UserRegistrationContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of RegistrationData)(EntitySetOperations.None)
            End Sub
        End Class
    End Class
End Namespace
