// ----------------------------------------------------------------------------------
// Microsoft Developer & Platform Evangelism
// 
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
// EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
// OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// ----------------------------------------------------------------------------------
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
// ----------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CustomerService.Model
{
    [DataContract(IsReference = false)]
    [KnownType(typeof(ProductCategory))]
    [KnownType(typeof(ProductModel))]
    [KnownType(typeof(SalesOrderDetail))]
    public partial class Product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private int _productID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string ProductNumber
        {
            get { return _productNumber; }
            set
            {
                if (_productNumber != value)
                {
                    _productNumber = value;
                    OnPropertyChanged("ProductNumber");
                }
            }
        }
        private string _productNumber;
    
        [DataMember]
        public string Color
        {
            get { return _color; }
            set
            {
                if (_color != value)
                {
                    _color = value;
                    OnPropertyChanged("Color");
                }
            }
        }
        private string _color;
    
        [DataMember]
        public decimal StandardCost
        {
            get { return _standardCost; }
            set
            {
                if (_standardCost != value)
                {
                    _standardCost = value;
                    OnPropertyChanged("StandardCost");
                }
            }
        }
        private decimal _standardCost;
    
        [DataMember]
        public decimal ListPrice
        {
            get { return _listPrice; }
            set
            {
                if (_listPrice != value)
                {
                    _listPrice = value;
                    OnPropertyChanged("ListPrice");
                }
            }
        }
        private decimal _listPrice;
    
        [DataMember]
        public string Size
        {
            get { return _size; }
            set
            {
                if (_size != value)
                {
                    _size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        private string _size;
    
        [DataMember]
        public Nullable<decimal> Weight
        {
            get { return _weight; }
            set
            {
                if (_weight != value)
                {
                    _weight = value;
                    OnPropertyChanged("Weight");
                }
            }
        }
        private Nullable<decimal> _weight;
    
        [DataMember]
        public Nullable<int> ProductCategoryID
        {
            get { return _productCategoryID; }
            set
            {
                if (_productCategoryID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductCategoryID", _productCategoryID);
                    if (!IsDeserializing)
                    {
                        if (ProductCategory != null && ProductCategory.ProductCategoryID != value)
                        {
                            ProductCategory = null;
                        }
                    }
                    _productCategoryID = value;
                    OnPropertyChanged("ProductCategoryID");
                }
            }
        }
        private Nullable<int> _productCategoryID;
    
        [DataMember]
        public Nullable<int> ProductModelID
        {
            get { return _productModelID; }
            set
            {
                if (_productModelID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductModelID", _productModelID);
                    if (!IsDeserializing)
                    {
                        if (ProductModel != null && ProductModel.ProductModelID != value)
                        {
                            ProductModel = null;
                        }
                    }
                    _productModelID = value;
                    OnPropertyChanged("ProductModelID");
                }
            }
        }
        private Nullable<int> _productModelID;
    
        [DataMember]
        public System.DateTime SellStartDate
        {
            get { return _sellStartDate; }
            set
            {
                if (_sellStartDate != value)
                {
                    _sellStartDate = value;
                    OnPropertyChanged("SellStartDate");
                }
            }
        }
        private System.DateTime _sellStartDate;
    
        [DataMember]
        public Nullable<System.DateTime> SellEndDate
        {
            get { return _sellEndDate; }
            set
            {
                if (_sellEndDate != value)
                {
                    _sellEndDate = value;
                    OnPropertyChanged("SellEndDate");
                }
            }
        }
        private Nullable<System.DateTime> _sellEndDate;
    
        [DataMember]
        public Nullable<System.DateTime> DiscontinuedDate
        {
            get { return _discontinuedDate; }
            set
            {
                if (_discontinuedDate != value)
                {
                    _discontinuedDate = value;
                    OnPropertyChanged("DiscontinuedDate");
                }
            }
        }
        private Nullable<System.DateTime> _discontinuedDate;
    
        [DataMember]
        public byte[] ThumbNailPhoto
        {
            get { return _thumbNailPhoto; }
            set
            {
                if (_thumbNailPhoto != value)
                {
                    _thumbNailPhoto = value;
                    OnPropertyChanged("ThumbNailPhoto");
                }
            }
        }
        private byte[] _thumbNailPhoto;
    
        [DataMember]
        public string ThumbnailPhotoFileName
        {
            get { return _thumbnailPhotoFileName; }
            set
            {
                if (_thumbnailPhotoFileName != value)
                {
                    _thumbnailPhotoFileName = value;
                    OnPropertyChanged("ThumbnailPhotoFileName");
                }
            }
        }
        private string _thumbnailPhotoFileName;
    
        [DataMember]
        public System.Guid rowguid
        {
            get { return _rowguid; }
            set
            {
                if (_rowguid != value)
                {
                    _rowguid = value;
                    OnPropertyChanged("rowguid");
                }
            }
        }
        private System.Guid _rowguid;
    
        [DataMember]
        public System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate");
                }
            }
        }
        private System.DateTime _modifiedDate;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ProductCategory ProductCategory
        {
            get { return _productCategory; }
            set
            {
                if (!ReferenceEquals(_productCategory, value))
                {
                    var previousValue = _productCategory;
                    _productCategory = value;
                    FixupProductCategory(previousValue);
                    OnNavigationPropertyChanged("ProductCategory");
                }
            }
        }
        private ProductCategory _productCategory;
    
        [DataMember]
        public ProductModel ProductModel
        {
            get { return _productModel; }
            set
            {
                if (!ReferenceEquals(_productModel, value))
                {
                    var previousValue = _productModel;
                    _productModel = value;
                    FixupProductModel(previousValue);
                    OnNavigationPropertyChanged("ProductModel");
                }
            }
        }
        private ProductModel _productModel;
    
        [DataMember]
        public TrackableCollection<SalesOrderDetail> SalesOrderDetails
        {
            get
            {
                if (_salesOrderDetails == null)
                {
                    _salesOrderDetails = new TrackableCollection<SalesOrderDetail>();
                    _salesOrderDetails.CollectionChanged += FixupSalesOrderDetails;
                }
                return _salesOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_salesOrderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_salesOrderDetails != null)
                    {
                        _salesOrderDetails.CollectionChanged -= FixupSalesOrderDetails;
                    }
                    _salesOrderDetails = value;
                    if (_salesOrderDetails != null)
                    {
                        _salesOrderDetails.CollectionChanged += FixupSalesOrderDetails;
                    }
                    OnNavigationPropertyChanged("SalesOrderDetails");
                }
            }
        }
        private TrackableCollection<SalesOrderDetail> _salesOrderDetails;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ProductCategory = null;
            ProductModel = null;
            SalesOrderDetails.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupProductCategory(ProductCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (ProductCategory != null)
            {
                if (!ProductCategory.Products.Contains(this))
                {
                    ProductCategory.Products.Add(this);
                }
    
                ProductCategoryID = ProductCategory.ProductCategoryID;
            }
            else if (!skipKeys)
            {
                ProductCategoryID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductCategory")
                    && (ChangeTracker.OriginalValues["ProductCategory"] == ProductCategory))
                {
                    ChangeTracker.OriginalValues.Remove("ProductCategory");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductCategory", previousValue);
                }
                if (ProductCategory != null && !ProductCategory.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductCategory.StartTracking();
                }
            }
        }
    
        private void FixupProductModel(ProductModel previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (ProductModel != null)
            {
                if (!ProductModel.Products.Contains(this))
                {
                    ProductModel.Products.Add(this);
                }
    
                ProductModelID = ProductModel.ProductModelID;
            }
            else if (!skipKeys)
            {
                ProductModelID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductModel")
                    && (ChangeTracker.OriginalValues["ProductModel"] == ProductModel))
                {
                    ChangeTracker.OriginalValues.Remove("ProductModel");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductModel", previousValue);
                }
                if (ProductModel != null && !ProductModel.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductModel.StartTracking();
                }
            }
        }
    
        private void FixupSalesOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SalesOrderDetail item in e.NewItems)
                {
                    item.Product = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalesOrderDetails", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalesOrderDetails", item);
                    }
                }
            }
        }

        #endregion
    }
}
