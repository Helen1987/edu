// ----------------------------------------------------------------------------------
// Microsoft Developer & Platform Evangelism
// 
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
// THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
// EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
// OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// ----------------------------------------------------------------------------------
// The example companies, organizations, products, domain names,
// e-mail addresses, logos, people, places, and events depicted
// herein are fictitious.  No association with any real company,
// organization, product, domain name, email address, logo, person,
// places, or events is intended or should be inferred.
// ----------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace CustomerService.Model
{
    [DataContract(IsReference = false)]
    [KnownType(typeof(Address))]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(SalesOrderDetail))]
    public partial class SalesOrderHeader: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SalesOrderID
        {
            get { return _salesOrderID; }
            set
            {
                if (_salesOrderID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SalesOrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _salesOrderID = value;
                    OnPropertyChanged("SalesOrderID");
                }
            }
        }
        private int _salesOrderID;
    
        [DataMember]
        public byte RevisionNumber
        {
            get { return _revisionNumber; }
            set
            {
                if (_revisionNumber != value)
                {
                    _revisionNumber = value;
                    OnPropertyChanged("RevisionNumber");
                }
            }
        }
        private byte _revisionNumber;
    
        [DataMember]
        public System.DateTime OrderDate
        {
            get { return _orderDate; }
            set
            {
                if (_orderDate != value)
                {
                    _orderDate = value;
                    OnPropertyChanged("OrderDate");
                }
            }
        }
        private System.DateTime _orderDate;
    
        [DataMember]
        public System.DateTime DueDate
        {
            get { return _dueDate; }
            set
            {
                if (_dueDate != value)
                {
                    _dueDate = value;
                    OnPropertyChanged("DueDate");
                }
            }
        }
        private System.DateTime _dueDate;
    
        [DataMember]
        public Nullable<System.DateTime> ShipDate
        {
            get { return _shipDate; }
            set
            {
                if (_shipDate != value)
                {
                    _shipDate = value;
                    OnPropertyChanged("ShipDate");
                }
            }
        }
        private Nullable<System.DateTime> _shipDate;
    
        [DataMember]
        public byte Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private byte _status;
    
        [DataMember]
        public bool OnlineOrderFlag
        {
            get { return _onlineOrderFlag; }
            set
            {
                if (_onlineOrderFlag != value)
                {
                    _onlineOrderFlag = value;
                    OnPropertyChanged("OnlineOrderFlag");
                }
            }
        }
        private bool _onlineOrderFlag;
    
        [DataMember]
        public string SalesOrderNumber
        {
            get { return _salesOrderNumber; }
            set
            {
                if (_salesOrderNumber != value)
                {
                    _salesOrderNumber = value;
                    OnPropertyChanged("SalesOrderNumber");
                }
            }
        }
        private string _salesOrderNumber;
    
        [DataMember]
        public string PurchaseOrderNumber
        {
            get { return _purchaseOrderNumber; }
            set
            {
                if (_purchaseOrderNumber != value)
                {
                    _purchaseOrderNumber = value;
                    OnPropertyChanged("PurchaseOrderNumber");
                }
            }
        }
        private string _purchaseOrderNumber;
    
        [DataMember]
        public string AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                if (_accountNumber != value)
                {
                    _accountNumber = value;
                    OnPropertyChanged("AccountNumber");
                }
            }
        }
        private string _accountNumber;
    
        [DataMember]
        public int CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    ChangeTracker.RecordOriginalValue("CustomerID", _customerID);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.CustomerID != value)
                        {
                            Customer = null;
                        }
                    }
                    _customerID = value;
                    OnPropertyChanged("CustomerID");
                }
            }
        }
        private int _customerID;
    
        [DataMember]
        public Nullable<int> ShipToAddressID
        {
            get { return _shipToAddressID; }
            set
            {
                if (_shipToAddressID != value)
                {
                    ChangeTracker.RecordOriginalValue("ShipToAddressID", _shipToAddressID);
                    if (!IsDeserializing)
                    {
                        if (Address1 != null && Address1.AddressID != value)
                        {
                            Address1 = null;
                        }
                    }
                    _shipToAddressID = value;
                    OnPropertyChanged("ShipToAddressID");
                }
            }
        }
        private Nullable<int> _shipToAddressID;
    
        [DataMember]
        public Nullable<int> BillToAddressID
        {
            get { return _billToAddressID; }
            set
            {
                if (_billToAddressID != value)
                {
                    ChangeTracker.RecordOriginalValue("BillToAddressID", _billToAddressID);
                    if (!IsDeserializing)
                    {
                        if (Address != null && Address.AddressID != value)
                        {
                            Address = null;
                        }
                    }
                    _billToAddressID = value;
                    OnPropertyChanged("BillToAddressID");
                }
            }
        }
        private Nullable<int> _billToAddressID;
    
        [DataMember]
        public string ShipMethod
        {
            get { return _shipMethod; }
            set
            {
                if (_shipMethod != value)
                {
                    _shipMethod = value;
                    OnPropertyChanged("ShipMethod");
                }
            }
        }
        private string _shipMethod;
    
        [DataMember]
        public string CreditCardApprovalCode
        {
            get { return _creditCardApprovalCode; }
            set
            {
                if (_creditCardApprovalCode != value)
                {
                    _creditCardApprovalCode = value;
                    OnPropertyChanged("CreditCardApprovalCode");
                }
            }
        }
        private string _creditCardApprovalCode;
    
        [DataMember]
        public decimal SubTotal
        {
            get { return _subTotal; }
            set
            {
                if (_subTotal != value)
                {
                    _subTotal = value;
                    OnPropertyChanged("SubTotal");
                }
            }
        }
        private decimal _subTotal;
    
        [DataMember]
        public decimal TaxAmt
        {
            get { return _taxAmt; }
            set
            {
                if (_taxAmt != value)
                {
                    _taxAmt = value;
                    OnPropertyChanged("TaxAmt");
                }
            }
        }
        private decimal _taxAmt;
    
        [DataMember]
        public decimal Freight
        {
            get { return _freight; }
            set
            {
                if (_freight != value)
                {
                    _freight = value;
                    OnPropertyChanged("Freight");
                }
            }
        }
        private decimal _freight;
    
        [DataMember]
        public decimal TotalDue
        {
            get { return _totalDue; }
            set
            {
                if (_totalDue != value)
                {
                    _totalDue = value;
                    OnPropertyChanged("TotalDue");
                }
            }
        }
        private decimal _totalDue;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public System.Guid rowguid
        {
            get { return _rowguid; }
            set
            {
                if (_rowguid != value)
                {
                    _rowguid = value;
                    OnPropertyChanged("rowguid");
                }
            }
        }
        private System.Guid _rowguid;
    
        [DataMember]
        public System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate");
                }
            }
        }
        private System.DateTime _modifiedDate;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Address Address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    FixupAddress(previousValue);
                    OnNavigationPropertyChanged("Address");
                }
            }
        }
        private Address _address;
    
        [DataMember]
        public Address Address1
        {
            get { return _address1; }
            set
            {
                if (!ReferenceEquals(_address1, value))
                {
                    var previousValue = _address1;
                    _address1 = value;
                    FixupAddress1(previousValue);
                    OnNavigationPropertyChanged("Address1");
                }
            }
        }
        private Address _address1;
    
        [DataMember]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnNavigationPropertyChanged("Customer");
                }
            }
        }
        private Customer _customer;
    
        [DataMember]
        public TrackableCollection<SalesOrderDetail> SalesOrderDetails
        {
            get
            {
                if (_salesOrderDetails == null)
                {
                    _salesOrderDetails = new TrackableCollection<SalesOrderDetail>();
                    _salesOrderDetails.CollectionChanged += FixupSalesOrderDetails;
                }
                return _salesOrderDetails;
            }
            set
            {
                if (!ReferenceEquals(_salesOrderDetails, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_salesOrderDetails != null)
                    {
                        _salesOrderDetails.CollectionChanged -= FixupSalesOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (SalesOrderDetail item in _salesOrderDetails)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _salesOrderDetails = value;
                    if (_salesOrderDetails != null)
                    {
                        _salesOrderDetails.CollectionChanged += FixupSalesOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (SalesOrderDetail item in _salesOrderDetails)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SalesOrderDetails");
                }
            }
        }
        private TrackableCollection<SalesOrderDetail> _salesOrderDetails;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Address = null;
            Address1 = null;
            Customer = null;
            SalesOrderDetails.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupAddress(Address previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SalesOrderHeaders.Contains(this))
            {
                previousValue.SalesOrderHeaders.Remove(this);
            }
    
            if (Address != null)
            {
                if (!Address.SalesOrderHeaders.Contains(this))
                {
                    Address.SalesOrderHeaders.Add(this);
                }
    
                BillToAddressID = Address.AddressID;
            }
            else if (!skipKeys)
            {
                BillToAddressID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Address")
                    && (ChangeTracker.OriginalValues["Address"] == Address))
                {
                    ChangeTracker.OriginalValues.Remove("Address");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Address", previousValue);
                }
                if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
                {
                    Address.StartTracking();
                }
            }
        }
    
        private void FixupAddress1(Address previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SalesOrderHeaders1.Contains(this))
            {
                previousValue.SalesOrderHeaders1.Remove(this);
            }
    
            if (Address1 != null)
            {
                if (!Address1.SalesOrderHeaders1.Contains(this))
                {
                    Address1.SalesOrderHeaders1.Add(this);
                }
    
                ShipToAddressID = Address1.AddressID;
            }
            else if (!skipKeys)
            {
                ShipToAddressID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Address1")
                    && (ChangeTracker.OriginalValues["Address1"] == Address1))
                {
                    ChangeTracker.OriginalValues.Remove("Address1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Address1", previousValue);
                }
                if (Address1 != null && !Address1.ChangeTracker.ChangeTrackingEnabled)
                {
                    Address1.StartTracking();
                }
            }
        }
    
        private void FixupCustomer(Customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SalesOrderHeaders.Contains(this))
            {
                previousValue.SalesOrderHeaders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.SalesOrderHeaders.Contains(this))
                {
                    Customer.SalesOrderHeaders.Add(this);
                }
    
                CustomerID = Customer.CustomerID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && (ChangeTracker.OriginalValues["Customer"] == Customer))
                {
                    ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }
    
        private void FixupSalesOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SalesOrderDetail item in e.NewItems)
                {
                    item.SalesOrderHeader = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalesOrderDetails", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalesOrderDetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalesOrderHeader, this))
                    {
                        item.SalesOrderHeader = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalesOrderDetails", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
