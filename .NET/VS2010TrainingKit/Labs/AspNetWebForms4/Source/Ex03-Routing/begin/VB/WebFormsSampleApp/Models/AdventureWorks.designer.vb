' ----------------------------------------------------------------------------------
' Microsoft Developer & Platform Evangelism
' 
' Copyright (c) Microsoft Corporation. All rights reserved.
' 
' THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
' EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ----------------------------------------------------------------------------------
' The example companies, organizations, products, domain names,
' e-mail addresses, logos, people, places, and events depicted
' herein are fictitious.  No association with any real company,
' organization, product, domain name, email address, logo, person,
' places, or events is intended or should be inferred.
' ----------------------------------------------------------------------------------

'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.20916.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace WebFormsSampleApp.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorksLT")> _
	Partial Public Class AdventureWorksDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertProductCategory(ByVal instance As ProductCategory)
	End Sub
	Partial Private Sub UpdateProductCategory(ByVal instance As ProductCategory)
	End Sub
	Partial Private Sub DeleteProductCategory(ByVal instance As ProductCategory)
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AdventureWorksLTConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property ProductCategories() As System.Data.Linq.Table(Of ProductCategory)
			Get
				Return Me.GetTable(Of ProductCategory)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SalesLT.ProductCategory")> _
	Partial Public Class ProductCategory
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductCategoryID As Integer

		Private _ParentProductCategoryID? As Integer

		Private _Name As String

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _ProductCategories As EntitySet(Of ProductCategory)

		Private _Products As EntitySet(Of Product)

		Private _ProductCategory1 As EntityRef(Of ProductCategory)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductCategoryIDChanged()
	End Sub
	Partial Private Sub OnParentProductCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnParentProductCategoryIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._ProductCategories = New EntitySet(Of ProductCategory)(New Action(Of ProductCategory)(AddressOf Me.attach_ProductCategories), New Action(Of ProductCategory)(AddressOf Me.detach_ProductCategories))
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			Me._ProductCategory1 = Nothing
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductCategoryID() As Integer
			Get
				Return Me._ProductCategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductCategoryID <> value) Then
					Me.OnProductCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductCategoryID = value
					Me.SendPropertyChanged("ProductCategoryID")
					Me.OnProductCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentProductCategoryID", DbType:="Int")> _
		Public Property ParentProductCategoryID() As Integer?
			Get
				Return Me._ParentProductCategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ParentProductCategoryID.Equals(value)) Then
					If Me._ProductCategory1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnParentProductCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._ParentProductCategoryID = value
					Me.SendPropertyChanged("ParentProductCategoryID")
					Me.OnParentProductCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set(ByVal value As String)
				If (Me._Name <> value) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging()
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCategory_ProductCategory", Storage:="_ProductCategories", ThisKey:="ProductCategoryID", OtherKey:="ParentProductCategoryID")> _
		Public Property ProductCategories() As EntitySet(Of ProductCategory)
			Get
				Return Me._ProductCategories
			End Get
			Set(ByVal value As EntitySet(Of ProductCategory))
				Me._ProductCategories.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCategory_Product", Storage:="_Products", ThisKey:="ProductCategoryID", OtherKey:="ProductCategoryID")> _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCategory_ProductCategory", Storage:="_ProductCategory1", ThisKey:="ParentProductCategoryID", OtherKey:="ProductCategoryID", IsForeignKey:=True)> _
		Public Property ProductCategory1() As ProductCategory
			Get
				Return Me._ProductCategory1.Entity
			End Get
			Set(ByVal value As ProductCategory)
				Dim previousValue As ProductCategory = Me._ProductCategory1.Entity
				If ((previousValue IsNot value) OrElse (Me._ProductCategory1.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._ProductCategory1.Entity = Nothing
						previousValue.ProductCategories.Remove(Me)
					End If
					Me._ProductCategory1.Entity = value
					If (value IsNot Nothing) Then
						value.ProductCategories.Add(Me)
						Me._ParentProductCategoryID = value.ProductCategoryID
					Else
						Me._ParentProductCategoryID = Nothing
					End If
					Me.SendPropertyChanged("ProductCategory1")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging()
			entity.ProductCategory1 = Me
		End Sub

		Private Sub detach_ProductCategories(ByVal entity As ProductCategory)
			Me.SendPropertyChanging()
			entity.ProductCategory1 = Nothing
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.ProductCategory = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.ProductCategory = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="SalesLT.Product")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _Name As String

		Private _ProductNumber As String

		Private _Color As String

		Private _StandardCost As Decimal

		Private _ListPrice As Decimal

		Private _Size As String

		Private _Weight? As Decimal

		Private _ProductCategoryID? As Integer

		Private _ProductModelID? As Integer

		Private _SellStartDate As System.DateTime

		Private _SellEndDate? As System.DateTime

		Private _DiscontinuedDate? As System.DateTime

		Private _ThumbNailPhoto As System.Data.Linq.Binary

		Private _ThumbnailPhotoFileName As String

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _ProductCategory As EntityRef(Of ProductCategory)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnProductNumberChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNumberChanged()
	End Sub
	Partial Private Sub OnColorChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnColorChanged()
	End Sub
	Partial Private Sub OnStandardCostChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnStandardCostChanged()
	End Sub
	Partial Private Sub OnListPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnListPriceChanged()
	End Sub
	Partial Private Sub OnSizeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSizeChanged()
	End Sub
	Partial Private Sub OnWeightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnWeightChanged()
	End Sub
	Partial Private Sub OnProductCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductCategoryIDChanged()
	End Sub
	Partial Private Sub OnProductModelIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductModelIDChanged()
	End Sub
	Partial Private Sub OnSellStartDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnSellStartDateChanged()
	End Sub
	Partial Private Sub OnSellEndDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnSellEndDateChanged()
	End Sub
	Partial Private Sub OnDiscontinuedDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnDiscontinuedDateChanged()
	End Sub
	Partial Private Sub OnThumbNailPhotoChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnThumbNailPhotoChanged()
	End Sub
	Partial Private Sub OnThumbnailPhotoFileNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnThumbnailPhotoFileNameChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._ProductCategory = Nothing
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set(ByVal value As String)
				If (Me._Name <> value) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging()
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
		Public Property ProductNumber() As String
			Get
				Return Me._ProductNumber
			End Get
			Set(ByVal value As String)
				If (Me._ProductNumber <> value) Then
					Me.OnProductNumberChanging(value)
					Me.SendPropertyChanging()
					Me._ProductNumber = value
					Me.SendPropertyChanged("ProductNumber")
					Me.OnProductNumberChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(15)")> _
		Public Property Color() As String
			Get
				Return Me._Color
			End Get
			Set(ByVal value As String)
				If (Me._Color <> value) Then
					Me.OnColorChanging(value)
					Me.SendPropertyChanging()
					Me._Color = value
					Me.SendPropertyChanged("Color")
					Me.OnColorChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardCost", DbType:="Money NOT NULL")> _
		Public Property StandardCost() As Decimal
			Get
				Return Me._StandardCost
			End Get
			Set(ByVal value As Decimal)
				If (Me._StandardCost <> value) Then
					Me.OnStandardCostChanging(value)
					Me.SendPropertyChanging()
					Me._StandardCost = value
					Me.SendPropertyChanged("StandardCost")
					Me.OnStandardCostChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Money NOT NULL")> _
		Public Property ListPrice() As Decimal
			Get
				Return Me._ListPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._ListPrice <> value) Then
					Me.OnListPriceChanging(value)
					Me.SendPropertyChanging()
					Me._ListPrice = value
					Me.SendPropertyChanged("ListPrice")
					Me.OnListPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="NVarChar(5)")> _
		Public Property Size() As String
			Get
				Return Me._Size
			End Get
			Set(ByVal value As String)
				If (Me._Size <> value) Then
					Me.OnSizeChanging(value)
					Me.SendPropertyChanging()
					Me._Size = value
					Me.SendPropertyChanged("Size")
					Me.OnSizeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(8,2)")> _
		Public Property Weight() As Decimal?
			Get
				Return Me._Weight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Weight.Equals(value)) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging()
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCategoryID", DbType:="Int")> _
		Public Property ProductCategoryID() As Integer?
			Get
				Return Me._ProductCategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductCategoryID.Equals(value)) Then
					If Me._ProductCategory.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductCategoryID = value
					Me.SendPropertyChanged("ProductCategoryID")
					Me.OnProductCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", DbType:="Int")> _
		Public Property ProductModelID() As Integer?
			Get
				Return Me._ProductModelID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductModelID.Equals(value)) Then
					Me.OnProductModelIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductModelID = value
					Me.SendPropertyChanged("ProductModelID")
					Me.OnProductModelIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")> _
		Public Property SellStartDate() As System.DateTime
			Get
				Return Me._SellStartDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._SellStartDate <> value) Then
					Me.OnSellStartDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellStartDate = value
					Me.SendPropertyChanged("SellStartDate")
					Me.OnSellStartDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellEndDate", DbType:="DateTime")> _
		Public Property SellEndDate() As System.DateTime?
			Get
				Return Me._SellEndDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._SellEndDate.Equals(value)) Then
					Me.OnSellEndDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellEndDate = value
					Me.SendPropertyChanged("SellEndDate")
					Me.OnSellEndDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscontinuedDate", DbType:="DateTime")> _
		Public Property DiscontinuedDate() As System.DateTime?
			Get
				Return Me._DiscontinuedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._DiscontinuedDate.Equals(value)) Then
					Me.OnDiscontinuedDateChanging(value)
					Me.SendPropertyChanging()
					Me._DiscontinuedDate = value
					Me.SendPropertyChanged("DiscontinuedDate")
					Me.OnDiscontinuedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbNailPhoto", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)> _
		Public Property ThumbNailPhoto() As System.Data.Linq.Binary
			Get
				Return Me._ThumbNailPhoto
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._ThumbNailPhoto IsNot value) Then
					Me.OnThumbNailPhotoChanging(value)
					Me.SendPropertyChanging()
					Me._ThumbNailPhoto = value
					Me.SendPropertyChanged("ThumbNailPhoto")
					Me.OnThumbNailPhotoChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ThumbnailPhotoFileName", DbType:="NVarChar(50)")> _
		Public Property ThumbnailPhotoFileName() As String
			Get
				Return Me._ThumbnailPhotoFileName
			End Get
			Set(ByVal value As String)
				If (Me._ThumbnailPhotoFileName <> value) Then
					Me.OnThumbnailPhotoFileNameChanging(value)
					Me.SendPropertyChanging()
					Me._ThumbnailPhotoFileName = value
					Me.SendPropertyChanged("ThumbnailPhotoFileName")
					Me.OnThumbnailPhotoFileNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductCategory_Product", Storage:="_ProductCategory", ThisKey:="ProductCategoryID", OtherKey:="ProductCategoryID", IsForeignKey:=True)> _
		Public Property ProductCategory() As ProductCategory
			Get
				Return Me._ProductCategory.Entity
			End Get
			Set(ByVal value As ProductCategory)
				Dim previousValue As ProductCategory = Me._ProductCategory.Entity
				If ((previousValue IsNot value) OrElse (Me._ProductCategory.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._ProductCategory.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._ProductCategory.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._ProductCategoryID = value.ProductCategoryID
					Else
						Me._ProductCategoryID = Nothing
					End If
					Me.SendPropertyChanged("ProductCategory")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
